[
    {
      "Function Name": "submit()",
      "How to Call": "formValidator.submit()",
      "Description": "Validates and submits a form.",
      "Browser Supported": "‚úÖ",
      "Console Supported (Node.js)": "‚ùå"
    },
    {
      "Function Name": "formValidator.validate():boolean",
      "How to Call": "formValidator.validate();",
      "Description": "Checks and validate all the input elements (inputs, textareas, select, checkboxs, etc)",
      "Browser Supported": "‚úÖ",
      "Console Supported (Node.js)": "‚ùå"
    },
    {
      "Function Name": "ajax(AJAXOptions: Object): Promise",
      "How to Call": "formValidator.ajax(AJAXOptions)",
      "Description": "Makes an AJAX request using the provided options and returns a Promise with the server's response.",
      "Browser Supported": "‚úÖ",
      "Console Supported (Node.js)": "‚úÖ"
    },
    {
      "Function Name": "getAJAXResponse(): Promise | false",
      "How to Call": "formValidator.getAJAXResponse();",
      "Description": "Retrieves the response from the last AJAX request made using the 'ajax' function. It returns a Promise if available, or false if the AJAX request has been resolved.",
      "Browser Supported": "‚úÖ",
      "Console Supported (Node.js)": "‚úÖ"
    },
    {
      "Function Name": "generateRandomPassword(): string",
      "How to Call": "formValidator.generateRandomPassword()",
      "Description": "Generates a random password with the specified length and optional inclusion of special characters.",
      "Browser Supported": "‚úÖ",
      "Console Supported (Node.js)": "‚úÖ"
    },
    {
      "Function Name": "checkPassword(password: string, shouldIncludeSymbol: bool): boolean",
      "How to Call": "formValidator.checkPassword('StrongP@ssword123', true)",
      "Description": "Checks the strength of the provided password against criteria like minimum length, character types, and optional symbol inclusion.",
      "Browser Supported": "‚úÖ",
      "Console Supported (Node.js)": "‚úÖ"
    },
    {
      "Function Name": "isEmail(email: string): boolean",
      "How to Call": "formValidator.isEmail('example@example.com')",
      "Description": "Checks if the given email is in a valid email format.",
      "Browser Supported": "‚úÖ",
      "Console Supported (Node.js)": "‚úÖ"
    },
    {
      "Function Name": "isURL(url: string): boolean",
      "How to Call": "formValidator.isURL('https://www.example.com')",
      "Description": "Checks if the given string is a valid URL.",
      "Browser Supported": "‚úÖ",
      "Console Supported (Node.js)": "‚úÖ"
    },
    {
      "Function Name": "isZipcode(zipcode: string): boolean",
      "How to Call": "formValidator.isZipcode('12345')",
      "Description": "Checks if the given string is a valid ZIP code.",
      "Browser Supported": "‚úÖ",
      "Console Supported (Node.js)": "‚úÖ"
    },
    {
      "Function Name": "containsOnlyIntegers(inputValue: string): boolean",
      "How to Call": "formValidator.containsOnlyIntegers('12345')",
      "Description": "Checks if the given input value contains only integers.",
      "Browser Supported": "‚úÖ",
      "Console Supported (Node.js)": "‚úÖ"
    },
    {
      "Function Name": "countString(inputValue: string): number",
      "How to Call": "formValidator.countString('Hello, World!')",
      "Description": "Counts the number of characters in the provided input value.",
      "Browser Supported": "‚úÖ",
      "Console Supported (Node.js)": "‚úÖ"
    },
    {
      "Function Name": "togglePasswordVisibility(icons: Object, form: HTMLFormElement or string)",
      "How to Call": "formValidator.togglePasswordVisibility({ 'show': 'üëÅÔ∏è', 'hide': 'üôà' }, 'myForm');",
      "Description": "Enables password visibility toggle for password input fields within a form.",
      "Browser Supported": "‚úÖ",
      "Console Supported (Node.js)": "‚ùå"
    },
    {
      "Function Name": "validateInput(input: HTMLInputElement or string): boolean",
      "How to Call": "formValidator.validateInput('usernameField')",
      "Description": "Validates an input field with the specified ID or HTML input element.",
      "Browser Supported": "‚úÖ",
      "Console Supported (Node.js)": "‚ùå"
    },
    {
      "Function Name": "validateAllInput(): boolean",
      "How to Call": "formValidator.validateAllInput()",
      "Description": "Validates all input fields within the form.",
      "Browser Supported": "‚úÖ",
      "Console Supported (Node.js)": "‚ùå"
    },
    {
      "Function Name": "validateSelect(select: HTMLSelectElement or string): boolean",
      "How to Call": "formValidator.validateSelect('countrySelect')",
      "Description": "Validates a select field with the specified ID or HTML select element.",
      "Browser Supported": "‚úÖ",
      "Console Supported (Node.js)": "‚ùå"
    },
    {
      "Function Name": "validateAllSelect(): boolean",
      "How to Call": "formValidator.validateAllSelect()",
      "Description": "Validates all select fields within the form.",
      "Browser Supported": "‚úÖ",
      "Console Supported (Node.js)": "‚ùå"
    },
    {
      "Function Name": "validateTextarea(textarea: HTMLTextAreaElement or string): boolean",
      "How to Call": "formValidator.validateTextarea('messageTextarea')",
      "Description": "Validates a textarea field with the specified ID or HTML textarea element.",
      "Browser Supported": "‚úÖ",
      "Console Supported (Node.js)": "‚ùå"
    },
    {
      "Function Name": "validateAllTextarea(): boolean",
      "How to Call": "formValidator.validateAllTextarea()",
      "Description": "Validates all textarea fields within the form.",
      "Browser Supported": "‚úÖ",
      "Console Supported (Node.js)": "‚ùå"
    },
    {
      "Function Name": "validateCheckbox(checkbox: HTMLInputElement or string): boolean",
      "How to Call": "formValidator.validateCheckbox('agreeCheckbox')",
      "Description": "Validates a checkbox field with the specified ID or HTML checkbox element.",
      "Browser Supported": "‚úÖ",
      "Console Supported (Node.js)": "‚ùå"
    },
    {
      "Function Name": "validateAllCheckbox(): boolean",
      "How to Call": "formValidator.validateAllCheckbox()",
      "Description": "Validates all checkbox fields within the form.",
      "Browser Supported": "‚úÖ",
      "Console Supported (Node.js)": "‚ùå"
    },
    {
      "Function Name": "validateRadio(radioName: string): boolean",
      "How to Call": "formValidator.validateRadio('genderRadio')",
      "Description": "Validates a radio button group with the specified name.",
      "Browser Supported": "‚úÖ",
      "Console Supported (Node.js)": "‚ùå"
    },
    {
      "Function Name": "validateAllRadio(): boolean",
      "How to Call": "formValidator.validateAllRadio()",
      "Description": "Validates all radio button groups within the form.",
      "Browser Supported": "‚úÖ",
      "Console Supported (Node.js)": "‚ùå"
    },
    {
      "Function Name": "restrictInputLengthWithCounter(inputElement: HTMLInputElement, counterContainer: HTMLElement, options: Object = {})",
      "How to Call": "formValidator.restrictInputLengthWithCounter('messageField', 100)",
      "Description": "Counts characters in the specified input field, restricts input, and displays a character counter.",
      "Browser Supported": "‚úÖ",
      "Console Supported (Node.js)": "‚ùå"
    },
    {
      "Function Name": "checkType(variable: any): string",
      "How to Call": "formValidator.checkType('hello')",
      "Description": "Determines the type of a given variable and returns a string representation of the type, or 'unknown' if type cannot be determined.",
      "Browser Supported": "‚úÖ",
      "Console Supported (Node.js)": "‚úÖ"
    },
    {
      "Function Name": "getPageUrl():string",
      "How to Call": "formValidator.getPageUrl()",
      "Description": "Returns the current page URL",
      "Browser Supported": "‚úÖ",
      "Console Supported (Node.js)": "‚ùå"
    },
    {
      "Function Name": "hashPassword(password):Promise",
      "How to Call": "formValidator.hashPassword('1234-efrgty').then((response)=>{ console.log(response) });",
      "Description": "Returns the promise which has the hashed password",
      "Browser Supported": "‚úÖ",
      "Console Supported (Node.js)": "‚úÖ"
    },
    {
      "Function Name": "displayError(errorDetails):void",
      "How to Call": "formValidator.displayError({ type : 'modal', message: response.message, duration: 3000, element: form, success: true })",
      "Description": "Displays and error message based on the object information you passed",
      "Browser Supported": "‚úÖ",
      "Console Supported (Node.js)": "‚ùå"
    },
    {
      "Function Name": "loading(message:string, submitBtn: HTM,String):bool",
      "How to Call": "formValidator.loading('Loading Message');",
      "Description": "The loading() function is used to display a loading message in your button. This function is ideal if you choose to use the validate() function independly. Because you might wish for the users to know they are awaiting a response, so you can have a little message or animation you wish to show between validation and perhaps awaiting the results from the AJAX request.",
      "Browser Supported": "‚úÖ",
      "Console Supported (Node.js)": "‚ùå"
    },
    {
      "Function Name": "isOnline(): bool",
      "How to Call": "const onlineStatus = formValidator.isOnline();",
      "Description": "The isOnline() function checks whether the current environment is a browser and determines if the browser is online. It returns true if the browser is online, and false otherwise.",
      "Browser Supported": "‚úÖ",
      "Console Supported (Node.js)": "‚ùå"
    },
    {
      "Function Name": "reset(form?: HTMLFormElement): bool",
      "How to Call": "const isResetSuccessful = formValidator.reset(); // Resets the internal form",
      "Description": "The reset() function resets form elements, including input fields, textareas, selects, radios, and checkboxes, to their default values or empty states. You can provide an optional form parameter to specify a different form to reset.",
      "Browser Supported": "‚úÖ",
      "Console Supported (Node.js)": "‚ùå"
    },
    {
      "Function Name": "verifyPassword(password1: string, password2: string, isHashed = false): Promise<boolean>",
      "How to Call": "(async () => { try { const isPasswordMatch = await formValidator.verifyPassword(password, password2); console.log( isPasswordMatch ); // logs true or false } catch (error) { console.error(error);})();",
      "Description": "The verifyPassword function asynchronously compares two passwords, supporting both hashed and plaintext passwords. If isHashed is true, it uses bcrypt.compare to compare hashed passwords. If isHashed is false, it directly compares plaintext passwords. Returns a Promise resolving to true if passwords match, and false otherwise or in case of an error.",
      "Browser Supported": "‚úÖ",
      "Console Supported (Node.js)": "‚úÖ"
    },
    {
      "Function Name": "getFormDetails(form: HTMLFormElement)",
      "How to Call": "const myFormDetails = formValidator.getFormDetails(); console.log(myFormDetails); // Logs either an object or false",
      "Description": "Fetches all values of the inputs with a `name` or  `data-attr-name` HTML attributes on a form element like input, select, textareas, etc.",
      "Browser Supported": "‚úÖ",
      "Console Supported (Node.js)": "‚ùå"
    },
    {
      "Function Name": "redirect(string [url=this.getPageUrl()], [number delay=0])",
      "How to Call": "formValidator.redirect('https://example.com', 3); // Redirects to 'https://example.com' after a 3-second delay",
      "Description": "takes an optional `url` parameter, defaulting to the current page's URL if not provided, and an optional `delay` parameter, defaulting to 0 seconds.",
      "Browser Supported": "‚úÖ",
      "Console Supported (Node.js)": "‚ùå"
    }
    
    
  ]
  