{"version":3,"file":"js/nfsfu234FormValidation.js","mappings":"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","sources":["webpack://NFSFU234FormValidation/webpack/universalModuleDefinition","webpack://NFSFU234FormValidation/./src/js/nfsfu234-form-validation.js","webpack://NFSFU234FormValidation/webpack/bootstrap","webpack://NFSFU234FormValidation/webpack/runtime/global","webpack://NFSFU234FormValidation/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"NFSFU234FormValidation\"] = factory();\n\telse\n\t\troot[\"NFSFU234FormValidation\"] = factory();\n})(this, () => {\nreturn ","\r\n// This is an Immediately Invoked Function Expression (IIFE) that takes an argument 'global'.\r\n// The 'global' argument is set to the global object in the browser (window) or Node.js (global).\r\n(function (global) {\r\n\r\n    // Define the class 'NFSFU234FormValidation'.\r\n    class NFSFU234FormValidation {\r\n        // Constructor of the class. It takes two parameters 'formOptions' and 'ajaxOptions'.\r\n        // The constructor is called when a new instance of the class is created.\r\n        constructor(formOptions, ajaxOptions) {\r\n            // Log a message to indicate that the 'NFSFU234FormValidation' library has been initiated.\r\n            console.log(\"NFSFU234FormValidation Library Initiated\");\r\n\r\n            if (typeof window !== 'undefined') {\r\n                this._form = ( formOptions && formOptions['form'] && this._checkVariableType(formOptions['form']) === 'string' && formOptions['form'] !== '' ) ? document.getElementById(formOptions['form']) : (formOptions && formOptions['form'] && this._checkVariableType(formOptions['form']) === 'HTML element') ? formOptions['form'] : ( document.getElementById('jsForm') ) ? document.getElementById('jsForm') : (document.querySelector('form') ) ? document.querySelector('form')  : null; // The form element.\r\n            }\r\n            else\r\n            {\r\n                this._form = null;\r\n            }\r\n\r\n            // Initialize properties with default values.\r\n            this._errorMessageContainer = null; // A container to display error messages.\r\n            this._AJAXResult = null; // Store the result of an AJAX call.\r\n            \r\n            // Assign the provided 'formOptions' and 'ajaxOptions' to class properties.\r\n            this._formOptions = (formOptions) ? formOptions : []; // Options related to the form.\r\n            this._ajaxOptions = (ajaxOptions) ? ajaxOptions : []; // Options related to AJAX calls.\r\n\r\n            // Assign specific properties from 'formOptions' to class properties.\r\n\r\n            this._isErrorInline = ( formOptions && formOptions['isErrorMessageInline'] === false ) ? false : true; // A flag to determine whether error messages should be displayed inline.\r\n\r\n            // Custom error messages provided in 'formOptions'.\r\n            this._customErrorMessages = (formOptions && formOptions['customErrorMessages']) ? formOptions['customErrorMessages'] : [];\r\n        }\r\n\r\n        /**\r\n         * Hashes a password securely based on the environment.\r\n         * @param {string} password - The password to be hashed.\r\n         * @returns {Promise<string>} A promise that resolves to the hashed password.\r\n         */\r\n        async _hashPassword(password) {\r\n            if (typeof window === 'undefined') {\r\n            // Node.js environment\r\n            return this._nodeHash(password);\r\n            } else {\r\n            // Browser environment\r\n            return this._browserHash(password);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Hashes a password using bcrypt in the browser environment.\r\n         * @param {string} password - The password to be hashed.\r\n         * @returns {Promise<string>} A promise that resolves to the hashed password.\r\n         */\r\n        async _browserHash(password) {\r\n            // Generate a unique salt for each password\r\n            const salt = await bcrypt.genSalt(10);\r\n\r\n            // Hash the password with the generated salt using bcrypt\r\n            const hashedPassword = await bcrypt.hash(password, salt);\r\n\r\n            return hashedPassword;\r\n        }\r\n\r\n        /**\r\n         * Hashes a password using bcrypt in the Node.js environment.\r\n         * @param {string} password - The password to be hashed.\r\n         * @returns {Promise<string>} A promise that resolves to the hashed password.\r\n         */\r\n        async _nodeHash(password) {\r\n\r\n            // Set an alternative random number generator for bcrypt\r\n            bcrypt.setRandomFallback((len) => {\r\n                const randomBytes = new Uint8Array(len);\r\n                for (let i = 0; i < len; i++) {\r\n                randomBytes[i] = Math.floor(Math.random() * 256);\r\n                }\r\n                return randomBytes;\r\n            });\r\n\r\n            // Generate a unique salt for each password\r\n            const salt = await bcrypt.genSalt(10);\r\n\r\n            // Hash the password with the generated salt using bcrypt\r\n            const hashedPassword = await bcrypt.hash(password, salt);\r\n\r\n            return hashedPassword;\r\n        }\r\n        \r\n        // Check if a given string is a valid email address.\r\n        _isEmail(email) {\r\n            const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n            return emailRegex.test(email);\r\n        }\r\n\r\n        // Check if a string contains only integers.\r\n        _containsOnlyIntegers(str) {\r\n            return /^\\d+$/.test(str);\r\n        }\r\n\r\n        /**\r\n         * Check if a given value is a valid ZIP code (exactly 6 digits).\r\n         * @param {string} zipCode - The ZIP code to be validated.\r\n         * @returns {boolean} - Returns true if the ZIP code is valid, otherwise false.\r\n         */\r\n        _isZIP(zipCode) {\r\n            // Regular expression to match ZIP codes with 5 or 6 digits\r\n            const zipCodeRegex = /^\\d{5}(?:\\d{1})?/;\r\n            return zipCodeRegex.test(zipCode);\r\n        }\r\n  \r\n\r\n        // Check if a given string is a valid URL starting with 'http://' or 'https://'.\r\n        _isURL( url) {\r\n            // Regular expression to check for 'http://' or 'https://' at the beginning\r\n            const urlPattern = /^(http:\\/\\/|https:\\/\\/)/i;\r\n            // If the input is a string, test it against the regular expression.\r\n            return (typeof url === 'string') ? urlPattern.test(url) : false;\r\n        }\r\n\r\n        /**\r\n         * Checks the data type of a variable and returns the corresponding type as a string.\r\n         *\r\n         * @param {*} variable - The variable to check the data type.\r\n         * @returns {string} Returns the data type of the variable as a string.\r\n         */\r\n        _checkVariableType(variable) {\r\n            // Check if the variable is a string\r\n            if (typeof variable === 'string') {\r\n            return 'string';\r\n            }\r\n            // Check if the variable is a number\r\n            else if (typeof variable === 'number') {\r\n            return 'number';\r\n            }\r\n            // Check if the variable is a boolean\r\n            else if (typeof variable === 'boolean') {\r\n            return 'boolean';\r\n            }\r\n            // Check if the variable is undefined\r\n            else if (typeof variable === 'undefined') {\r\n            return 'undefined';\r\n            }\r\n            // Check if the variable is null\r\n            else if (variable === null) {\r\n            return 'null';\r\n            }\r\n            // Check if the variable is an array\r\n            else if (typeof variable === 'object' && variable instanceof Array) {\r\n            return 'array';\r\n            }\r\n            // Check if the variable is an object\r\n            else if (typeof variable === 'object' && variable instanceof Object) {\r\n            return 'object';\r\n            }\r\n            // Check if the variable is a function\r\n            else if (typeof variable === 'function') {\r\n            return 'function';\r\n            }\r\n            // Check if the variable is an HTMLElement (assumes that HTMLElement is defined in the environment)\r\n            else if (variable instanceof HTMLElement) {\r\n            return 'HTML element';\r\n            }\r\n            // If none of the above conditions match, the data type is unknown\r\n            else {\r\n            return 'null';\r\n            }\r\n        }\r\n                \r\n\r\n        /**\r\n         * Count input characters and restrict input while typing in a given input element.\r\n         * @param {HTMLInputElement} inputElement - The HTML input element to count and restrict.\r\n         * @param {HTMLElement} [counterContainer] - Optional container to display the character count. If not provided, it creates one automatically.\r\n         * @param {Object} [options={}] - An object with the following optional properties:\r\n         *   - maxLength {number}: Maximum allowed characters (default: 250).\r\n         *   - minLength {number}: Minimum allowed characters (default: 0).\r\n         *   - shouldButtonDisable {boolean}: Flag to determine whether to disable buttons on reaching maxLength (default: false).\r\n         *   - formId {string}: The ID of the form element associated with the input.\r\n         * @returns {boolean} Return true if the input meets the restrictions, otherwise false.\r\n         */\r\n        _countInputCharactersAndRestrictInputWhileTyping(inputElement, counterContainer, options = {}) {\r\n\r\n            // Check if the input element exists.\r\n            if (!inputElement) {\r\n                console.error(\"The input element you are trying to count and restrict is not found. Check your HTML code.\");\r\n                return false;\r\n            }\r\n\r\n            // Extract options or set default values.\r\n            const maxLength = (parseInt(options['maxLength']) && options['maxLength'] >= 1) ? options['maxLength'] : 250;\r\n            const minLength = (parseInt(options['minLength'])) ? options['minLength'] : 0;\r\n            const shouldButtonDisable = (options['shouldButtonDisable']) ? true : false;\r\n            const form = (options['formId'] != '' && document.getElementById(options['formId'])) ? document.getElementById(options['formId']) : (!options['formId']) ? document.querySelector('form') : options['formId'];\r\n\r\n            // Add an event listener to the input element for counting and restricting.\r\n            inputElement.addEventListener('input', () => {\r\n                // Count the number of characters in the input element.\r\n                var textLength = this._countString(inputElement.value);\r\n                var returnMessage = false;\r\n\r\n                // Check if a counter container is provided or create one if not.\r\n                var counterElement;\r\n                // counterContainer = (counterContainer && this._checkVariableType(counterContainer ) === 'HTML element' ) ? counterContainer : (counterContainer && this._checkVariableType(counterContainer ) === 'string' && document.getElementById(counterContainer) ) ? document.getElementById(counterContainer) : ( document.querySelector('.js-counterContainer') ) ? document.querySelector('.js-counterContainer') : false;\r\n                if (!counterContainer) {\r\n                    counterElement = document.createElement('span');\r\n                    counterElement.classList.add('js-counterContainer');\r\n                    inputElement.parentNode.appendChild(counterElement);\r\n                } else {\r\n                    counterElement = counterContainer;\r\n                }\r\n\r\n                // Apply restrictions based on character count and options.\r\n                if (textLength > maxLength) {\r\n                    textLength = maxLength;\r\n                    counterElement.classList.remove('text-fail');\r\n                    counterElement.classList.add('text-success');\r\n                    inputElement.value = inputElement.value.slice(0, maxLength);\r\n\r\n                    // Enable buttons in the associated form (if specified).\r\n                    if (shouldButtonDisable && form) {\r\n                        form.querySelectorAll('button').forEach((button) => {\r\n                            button.disabled = false;\r\n                        });\r\n                    }\r\n\r\n                    returnMessage = true;\r\n                } else if (textLength >= maxLength) {\r\n                    inputElement.value = inputElement.value.slice(0, maxLength);\r\n                    counterElement.classList.remove('text-fail');\r\n                    counterElement.classList.add('text-success');\r\n\r\n                    // Enable buttons in the associated form (if specified).\r\n                    if (shouldButtonDisable && form) {\r\n                        form.querySelectorAll('button').forEach((button) => {\r\n                            button.disabled = false;\r\n                        });\r\n                    }\r\n\r\n                    returnMessage = true;\r\n                } else if (textLength >= minLength && minLength !== 0) {\r\n                    counterElement.classList.remove('text-fail');\r\n                    counterElement.classList.add('text-success');\r\n\r\n                    // Enable buttons in the associated form (if specified).\r\n                    if (shouldButtonDisable && form) {\r\n                        form.querySelectorAll('button').forEach((button) => {\r\n                            button.disabled = false;\r\n                        });\r\n                    }\r\n\r\n                    returnMessage = true;\r\n                } else {\r\n                    counterElement.classList.add('text-fail');\r\n\r\n                    // Enable buttons in the associated form (if specified).\r\n                    if (shouldButtonDisable && form) {\r\n                        form.querySelectorAll('button').forEach((button) => {\r\n                            button.disabled = false;\r\n                        });\r\n                    }\r\n                }\r\n\r\n                // Update the counter element with the current character count.\r\n                counterElement.innerHTML = `${textLength}/${maxLength}`;\r\n\r\n                return returnMessage;\r\n            });\r\n        }\r\n\r\n\r\n        /**\r\n         * Generate a random password that meets specific criteria.\r\n         * The generated password will have a random length between 'minLength' and 'maxLength',\r\n         * and it will contain at least one uppercase letter, one symbol, and one number.\r\n         * The remaining characters will be randomly selected from uppercase letters, lowercase letters,\r\n         * numbers, and symbols to meet the desired password length.\r\n         *\r\n         * @returns {string} The randomly generated password.\r\n         */\r\n        _generatePassword() {\r\n            /**\r\n             * The minimum length of the generated password.\r\n             * @type {number}\r\n             * @constant\r\n             */\r\n            const minLength = 8;\r\n\r\n            /**\r\n             * The maximum length of the generated password.\r\n             * @type {number}\r\n             * @constant\r\n             */\r\n            const maxLength = 16;\r\n\r\n            /**\r\n             * A string containing all uppercase letters.\r\n             * @type {string}\r\n             * @constant\r\n             */\r\n            const uppercaseLetters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\n\r\n            /**\r\n             * A string containing all lowercase letters.\r\n             * @type {string}\r\n             * @constant\r\n             */\r\n            const lowercaseLetters = \"abcdefghijklmnopqrstuvwxyz\";\r\n\r\n            /**\r\n             * A string containing all digits (numbers).\r\n             * @type {string}\r\n             * @constant\r\n             */\r\n            const numbers = \"0123456789\";\r\n\r\n            /**\r\n             * A string containing all symbols.\r\n             * @type {string}\r\n             * @constant\r\n             */\r\n            const symbols = \"!@#$%^&*()\";\r\n\r\n            /**\r\n             * The generated password.\r\n             * @type {string}\r\n             */\r\n            let password = \"\";\r\n\r\n            /**\r\n             * Generate a random length for the password between 'minLength' and 'maxLength'.\r\n             * @type {number}\r\n             */\r\n            const randomLength = Math.floor(Math.random() * (maxLength - minLength + 1)) + minLength;\r\n\r\n            // Add at least one uppercase letter to the password.\r\n            password += uppercaseLetters[Math.floor(Math.random() * uppercaseLetters.length)];\r\n\r\n            // Add at least one symbol to the password.\r\n            password += symbols[Math.floor(Math.random() * symbols.length)];\r\n\r\n            // Add at least one number to the password.\r\n            password += numbers[Math.floor(Math.random() * numbers.length)];\r\n\r\n            /**\r\n             * The number of characters already added to the password.\r\n             * Start with 3 since we added one uppercase letter, one symbol, and one number already.\r\n             * @type {number}\r\n             */\r\n            let charactersAdded = 3;\r\n\r\n            // Add remaining characters based on the randomLength.\r\n            while (charactersAdded < randomLength) {\r\n                // Choose a random character type: 0 for uppercase letter, 1 for lowercase letter, 2 for symbol, 3 for number.\r\n                const randomCharType = Math.floor(Math.random() * 4);\r\n\r\n                if (randomCharType === 0) {\r\n                    password += uppercaseLetters[Math.floor(Math.random() * uppercaseLetters.length)];\r\n                } else if (randomCharType === 1) {\r\n                    password += lowercaseLetters[Math.floor(Math.random() * lowercaseLetters.length)];\r\n                } else if (randomCharType === 2) {\r\n                    password += symbols[Math.floor(Math.random() * symbols.length)];\r\n                } else {\r\n                    password += numbers[Math.floor(Math.random() * numbers.length)];\r\n                }\r\n\r\n                charactersAdded++;\r\n            }\r\n\r\n            // Return the generated password.\r\n            return password;\r\n        }\r\n\r\n        /**\r\n         * Check if a given password meets specific criteria.\r\n         * @param {string} password - The password to be checked.\r\n         * @param {boolean} [includeSymbolsCheck=false] - Flag to determine if symbols check is required (default: false).\r\n         * @param {RegExp | string} [userSymbolRegex=''] - Custom regular expression or string representing symbols to check (default: '').\r\n         * @returns {boolean | string} Returns true if the password meets the criteria; otherwise, returns an error message.\r\n         */\r\n        _checkPassword(password, includeSymbolsCheck = false, userSymbolRegex = '') {\r\n            // Define the minimum and maximum length of the password.\r\n            const minLength = 8;\r\n            const maxLength = 20;\r\n\r\n            // Regular expressions for checking uppercase, lowercase, and numeric characters.\r\n            const uppercaseRegex = /[A-Z]/;\r\n            const lowercaseRegex = /[a-z]/;\r\n            const numbersRegex = /[0-9]/;\r\n\r\n            // Initialize an error message variable.\r\n            var errorMessage = '';\r\n\r\n            // Check the length of the password.\r\n            if (password.length < minLength || password.length > maxLength) {\r\n                errorMessage = \"Make sure the length of your password ranges from 8 - 20 characters\";\r\n                return errorMessage;\r\n            }\r\n\r\n            // Check if the password contains at least one uppercase letter.\r\n            if (!uppercaseRegex.test(password)) {\r\n                errorMessage = \"Your password needs to have at least 1 uppercase (A-Z)\";\r\n                return errorMessage;\r\n            }\r\n\r\n            // Check if the password contains at least one lowercase letter.\r\n            if (!lowercaseRegex.test(password)) {\r\n                errorMessage = \"Your password needs to have at least one lowercase (a-z)\";\r\n                return errorMessage;\r\n            }\r\n\r\n            // Check if the password contains at least one numeric character.\r\n            if (!numbersRegex.test(password)) {\r\n                errorMessage = \"Your password needs to have at least one number (0-9)\";\r\n                return errorMessage;\r\n            }\r\n\r\n            // If symbols check is required, perform the check.\r\n            if (includeSymbolsCheck) {\r\n                // Define the regular expression for symbols or use the custom one provided by the user.\r\n                const symbolRegex = (userSymbolRegex !== '') ? userSymbolRegex : /[!@#$%^&*()]/;\r\n\r\n                // Check if the password contains at least one symbol.\r\n                if (!symbolRegex.test(password)) {\r\n                    errorMessage = \"Your password needs to have one symbol e.g (!@#$%^&*())\";\r\n                    return errorMessage;\r\n                }\r\n            }\r\n\r\n            // If all checks pass, return true.\r\n            return true;\r\n        }\r\n\r\n\r\n        _countString(string) \r\n        {\r\n            // Check if input is a string, if not, convert it to string\r\n            const stringInput = typeof string === \"string\" ? string : string.toString();\r\n            \r\n            return stringInput.length;\r\n        }\r\n\r\n        /**\r\n         * Get the current URL (page URL) of the window.\r\n         * @returns {string} The current URL (page URL) of the window.\r\n         */\r\n        _getPageUrl() {\r\n            // Access the 'window' object and retrieve the current URL using 'window.location.href'.\r\n            // This will return the complete URL, including the protocol (http/https), domain, port, path, and query parameters.\r\n            return window.location.href;\r\n        }\r\n\r\n        /**\r\n         * Toggle password visibility for all password inputs within a given form.\r\n         * @param {HTMLFormElement} form - The form element containing the password inputs.\r\n         * @param {Object} [icons={'show': 'show', 'hide': 'hide'}] - Custom icons to display for password visibility toggle (default: {'show': 'show', 'hide': 'hide'}).\r\n         */\r\n        _togglePasswordVisibility(icons = [], uform,) {\r\n\r\n            var form = (uform) ? uform : (document.getElementById(uform) ) ? document.getElementById(uform) : (this._form);\r\n\r\n            // Get all password inputs within the specified form.\r\n            const allPasswordInputs = form.querySelectorAll('input[type=\"password\"]');\r\n\r\n            // Loop through each password input.\r\n            allPasswordInputs.forEach((input) => {\r\n                // Get all visibility icon containers within the form.\r\n                const allVisibilityIconContainer = form.querySelectorAll('.js-togglePassword');\r\n\r\n                // Attach a click event listener to each visibility icon container.\r\n                allVisibilityIconContainer.forEach((iconContainer) => {\r\n                    iconContainer.addEventListener('click', () => {\r\n                        // Get the current input type (either 'password' or 'text').\r\n                        const inputType = input.getAttribute('type');\r\n                        // Toggle the input type between 'password' and 'text'.\r\n                        input.setAttribute('type', inputType === 'password' ? 'text' : 'password');\r\n\r\n                        // Determine the icons to use for showing and hiding the password.\r\n                        const showIcon = (icons && icons['show'] && icons['show'] !== '' ) ? icons['show'] : 'show';\r\n                        const hideIcon = (icons && icons['hide'] && icons['hide'] !== '' ) ? icons['hide'] : 'hide';\r\n\r\n                        // Update the visibility icon based on the current input type.\r\n                        if (inputType === 'password') {\r\n                            iconContainer.innerHTML = hideIcon;\r\n                        } else if (inputType === 'text') {\r\n                            iconContainer.innerHTML = showIcon;\r\n                        } else {\r\n                            iconContainer.innerHTML = showIcon;\r\n                        }\r\n                    });\r\n                });\r\n            });\r\n        }\r\n\r\n\r\n        /**\r\n         * focusInputElement\r\n         * \r\n         * This function sets focus on an input element and adds a CSS class to highlight it temporarily.\r\n         * After a specified duration, the CSS class is removed to revert the highlighting effect.\r\n         * \r\n         * @param {HTMLElement} inputElement - The input element to focus on.\r\n         * @param {number} duration - The duration (in milliseconds) for which the highlighting effect is visible.\r\n         */\r\n         _focusInputElement(inputElement, duration) {\r\n            // Set focus on the specified input element to bring it into focus.\r\n            inputElement.focus();\r\n\r\n            // Add the 'input-focus-error' CSS class to the input element to apply the temporary highlighting effect.\r\n            inputElement.classList.add('input-focus-error');\r\n\r\n            // After the specified duration, remove the 'input-focus-error' CSS class to revert the highlighting effect.\r\n            setTimeout(() => {\r\n                inputElement.classList.remove('input-focus-error');\r\n            }, duration);\r\n        }\r\n\r\n        /**\r\n         * displayErrorInline\r\n         * \r\n         * This function displays an error message inline next to an input field on a login page.\r\n         * The error message is shown for a specified duration and can also be a success message.\r\n         * \r\n         * @param {HTMLElement} inputField - The input field element where the error message will be displayed.\r\n         * @param {string} message - The error message to be displayed.\r\n         * @param {number} duration - The duration (in milliseconds) for which the error message is visible inline. Default: 3000 ms.\r\n         * @param {boolean} isSuccess - A flag indicating if the message is a success message (true) or an error message (false). Default: false.\r\n         */\r\n         _displayErrorInline(inputField, message, duration = 3000, isSuccess = false) {\r\n            // Focus on the input field and temporarily highlight it using the _focusInputElement function.\r\n            this._focusInputElement(inputField, duration);\r\n\r\n            // Create the inline error message container element.\r\n            const errorMessageContainer = document.createElement('div');\r\n            errorMessageContainer.classList.add('js-inline-message');\r\n\r\n            // Set the error message content inside the container.\r\n            errorMessageContainer.innerHTML = message;\r\n\r\n            // Append the error message container to the parent of the input tag, placing it inline next to the input field.\r\n            inputField.parentNode.appendChild(errorMessageContainer);\r\n\r\n            // Add the 'text-success' class to the container if it's a success message, making it visually distinct.\r\n            if (isSuccess) {\r\n                errorMessageContainer.classList.add('text-success');\r\n            }\r\n\r\n            // After the specified duration, remove the error message container to hide the message.\r\n            setTimeout(() => {\r\n                inputField.parentNode.removeChild(errorMessageContainer);\r\n            }, duration);\r\n        }\r\n\r\n        /**\r\n         * displayErrorModal\r\n         *\r\n         * This function displays an error message in a modal-like container for a specified duration.\r\n         * The error message can be customized to indicate success (green color) or failure (red color).\r\n         * If a custom error container ID is provided, the error message is appended to that container;\r\n         * otherwise, it creates a new container and appends it to the form.\r\n         *\r\n         * @param {string} message - The error message to display.\r\n         * @param {HTMLElement} form - The form element to which the error message will be added.\r\n         * @param {string} errorContainerId - Optional. The ID of the custom error container.\r\n         * @param {number} duration - Optional. The duration (in milliseconds) for which the error message is visible. Default: 3000 ms.\r\n         * @param {boolean} isSuccess - Optional. If true, the message is displayed as a success message (green color). Default: false.\r\n         * @param {boolean} shouldLogToConsole - Optional. If true, the error message is logged to the console. Default: false.\r\n         */\r\n        _displayErrorModal(message, form, errorContainerId = '', duration = 3000, isSuccess = false, shouldLogToConsole = false) {\r\n\r\n            // Determine the error container based on the provided ID or create a new one if not available\r\n            var errorMessageParentContainer;\r\n\r\n            if (errorContainerId != '') {\r\n                errorMessageParentContainer = document.getElementById(errorContainerId);\r\n            } else if (document.querySelectorAll('#js-errorMessageContainer').length > 0) {\r\n                errorMessageParentContainer = form.querySelector('#js-errorMessageContainer');\r\n            } else {\r\n                errorMessageParentContainer = document.createElement('div');\r\n                errorMessageParentContainer.classList.add('js-errorMessageContainer');\r\n                errorMessageParentContainer.setAttribute('id', 'js-errorMessageContainer');\r\n                form.appendChild(errorMessageParentContainer);\r\n            }\r\n\r\n            // Create the error message container and append it to the error container parent\r\n            var errorMessageContainer = document.createElement('div');\r\n            errorMessageContainer.classList.add('login-error-message-container', 'active');\r\n\r\n            var errorMessageMessageContainer = document.createElement('div');\r\n            errorMessageMessageContainer.classList.add('message', 'js-message');\r\n            errorMessageMessageContainer.innerHTML = message;\r\n\r\n            const errorMessageIconContainer = document.createElement('div');\r\n            errorMessageIconContainer.classList.add('icon', 'close', 'js-close');\r\n            errorMessageIconContainer.innerHTML = \"<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'><path d='M15.71,8.29a1,1,0,0,0-1.42,0L12,10.59,9.71,8.29A1,1,0,0,0,8.29,9.71L10.59,12l-2.3,2.29a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0L12,13.41l2.29,2.3a1,1,0,0,0,1.42,0,1,1,0,0,0,0-1.42L13.41,12l2.3-2.29A1,1,0,0,0,15.71,8.29Zm3.36-3.36A10,10,0,1,0,4.93,19.07,10,10,0,1,0,19.07,4.93ZM17.66,17.66A8,8,0,1,1,20,12,7.95,7.95,0,0,1,17.66,17.66Z'/></svg>\";\r\n\r\n            errorMessageContainer.appendChild(errorMessageMessageContainer);\r\n            errorMessageContainer.appendChild(errorMessageIconContainer);\r\n\r\n            errorMessageParentContainer.appendChild(errorMessageContainer);\r\n\r\n            // Optionally, set the success class to display the message in green color\r\n            if (isSuccess) {\r\n                errorMessageContainer.classList.add('success');\r\n            }\r\n\r\n            // Listens to when the user clicks on the close button of an error message container\r\n            const errorMessageContainerCloseBtn = errorMessageContainer.querySelector('.js-close');\r\n            errorMessageContainerCloseBtn.addEventListener('click', () => {\r\n                if (errorMessageContainer && errorMessageContainer.parentNode) {\r\n                    errorMessageContainer.parentNode.removeChild(errorMessageContainer);\r\n                }\r\n            });\r\n\r\n            // Set timeout to remove the error message container after the specified duration\r\n            setTimeout(() => {\r\n                if (errorMessageContainer && errorMessageContainer.parentNode) {\r\n                    errorMessageContainer.parentNode.removeChild(errorMessageContainer);\r\n                }\r\n            }, duration);\r\n\r\n            // Optionally, log the error message to the console\r\n            if (shouldLogToConsole) {\r\n                console.error(message);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * getFormDetails\r\n         *\r\n         * This function retrieves data from the provided form element.\r\n         * It collects data from input fields, textareas, and select elements with the specified attribute 'data-attr-name'.\r\n         * The collected data is stored in an object with attribute names as keys and corresponding input values as values.\r\n         *\r\n         * @param {HTMLElement} form - The HTML form element from which to extract data.\r\n         * @returns {Object|boolean} - Returns an object containing form data if successful, or false if the form is not valid or no data is found.\r\n         */\r\n        _getFormDetails(form)\r\n        {\r\n\r\n            let errorMessage;\r\n\r\n            // Check if the form exists; otherwise, log an error to the console and return false\r\n            if (!form) {\r\n                errorMessage = 'Check the form you are trying to validate';\r\n                console.error(errorMessage);\r\n                return false;\r\n            }\r\n\r\n            // A list to keep track of whether the extraction process for different elements was successful\r\n            var shouldContinue = [];\r\n\r\n            const requestData = {};\r\n\r\n            // Getting all the HTML input tags in the form\r\n            const allInputsInForm = form.querySelectorAll('input');\r\n\r\n            // Getting all the HTML textarea tags in the form\r\n            const allTextareasInForm = form.querySelectorAll('textarea');\r\n\r\n            // Getting all the HTML select tags in the form\r\n            const allSelectsInForm = form.querySelectorAll('select');\r\n\r\n            // Extract data from input tags in the form\r\n            if (allInputsInForm.length > 0) {\r\n\r\n                allInputsInForm.forEach((input, index) => {\r\n                    var attributeName = (input.getAttribute('data-attr-name')) ? input.getAttribute('data-attr-name') : index;\r\n                    var inputValue = input.value;\r\n\r\n                    if ( input.getAttribute('type') === 'checkbox' )\r\n                    {\r\n                        if (input.checked) {\r\n                            inputValue = true;\r\n                        } \r\n                        else\r\n                        {\r\n                            inputValue = false;\r\n                        }\r\n                    }\r\n\r\n                    if ( input.getAttribute('type') === 'radio' )\r\n                    {\r\n                        if (input.checked) {\r\n                            inputValue = true;\r\n                        } \r\n                        else{\r\n                            inputValue = false;\r\n                        }\r\n                    }\r\n\r\n                    // Check if the attribute name exists and is not null, NaN, or undefined\r\n                    if (attributeName != null || attributeName != NaN || attributeName != undefined || attributeName != 'null') {\r\n                        requestData[attributeName] = inputValue;\r\n                    }\r\n\r\n                    shouldContinue.push(true);\r\n                });\r\n            } else {\r\n                shouldContinue.push(true);\r\n            }\r\n\r\n            // Extract data from textarea tags in the form\r\n            if (allTextareasInForm.length > 0) {\r\n\r\n                allTextareasInForm.forEach((textarea) => {\r\n                    var attributeName = textarea.getAttribute('data-attr-name');\r\n                    const textareaValue = textarea.value;\r\n\r\n                    // Check if the attribute name exists and is not null, NaN, or undefined\r\n                    if (attributeName != null || attributeName != NaN || attributeName != undefined) {\r\n                        requestData[attributeName] = textareaValue;\r\n                    }\r\n\r\n                    shouldContinue.push(true);\r\n                });\r\n            } else {\r\n                shouldContinue.push(true);\r\n            }\r\n\r\n            // Extract data from select tags in the form\r\n            if (allSelectsInForm.length > 0) {\r\n\r\n                allSelectsInForm.forEach((select) => {\r\n                    var attributeName = select.getAttribute('data-attr-name');\r\n                    const selectValue = select.value;\r\n\r\n                    // Check if the attribute name exists and is not null, NaN, or undefined\r\n                    if (attributeName != null || attributeName != NaN || attributeName != undefined) {\r\n                        requestData[attributeName] = selectValue;\r\n                    }\r\n\r\n                    shouldContinue.push(true);\r\n                });\r\n            } else {\r\n                shouldContinue.push(true);\r\n            }\r\n\r\n            // Check if all elements in the form extraction process were successful\r\n            if ( this._areAllElementsTrue(shouldContinue)) {\r\n                return requestData; // Return the object containing the form data\r\n            } else {\r\n                return false; // Return false if any part of the form extraction process failed\r\n            }\r\n\r\n        }\r\n\r\n        /**\r\n         * Validate Form\r\n         *\r\n         * This function will be responsible for handling the validation of a form.\r\n         * @param {HTMLFormElement} form - The form element to be validated.\r\n         * @param {boolean} isErrorInline - Flag to determine if errors should be displayed inline or in a modal. Default is true.\r\n         * @returns {boolean} Returns true if the form passes all validation checks, otherwise false.\r\n         */\r\n        _validateForm(form, customErrorMessages, isErrorInline = true) {\r\n            // Initialize the errorMessage variable\r\n            let errorMessage;\r\n\r\n            // Check if the form exists; if not, log an error to the console and return false\r\n            if (!form) {\r\n                errorMessage = 'Check the form you are trying to validate';\r\n                console.error(errorMessage);\r\n                return false;\r\n            }\r\n\r\n            // Initialize an array to track whether each validation check passes (true) or fails (false)\r\n            var shouldContinue = [];\r\n\r\n            if ( this.validateAllInput(form, customErrorMessages)  )\r\n            {\r\n                shouldContinue.push(true);\r\n            }\r\n            else\r\n            {\r\n                shouldContinue.push(false);\r\n            }\r\n\r\n            if ( this.validateAllTextarea(form, customErrorMessages) )\r\n            {\r\n                shouldContinue.push(true);\r\n            }\r\n            else\r\n            {\r\n                shouldContinue.push(false);\r\n            }\r\n\r\n            if ( this.validateAllSelect(form, customErrorMessages)    )\r\n            {\r\n                shouldContinue.push(true);\r\n            }\r\n            else\r\n            {\r\n                shouldContinue.push(false);\r\n            }\r\n\r\n            // Check if all elements in the shouldContinue array are equal to true\r\n            if (this._areAllElementsTrue(shouldContinue)) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n\r\n        }\r\n\r\n        /**\r\n         * Check if All Elements are True\r\n         *\r\n         * This function checks if all elements in the given array are equal to true.\r\n         *\r\n         * @param {Array} arr - The array to be checked.\r\n         * @returns {boolean} Returns true if all elements in the array are equal to true, otherwise false.\r\n         */\r\n        _areAllElementsTrue(arr) {\r\n            // Use the 'every' method to check if every element in the array is equal to true\r\n            return arr.every(element => element === true);\r\n        }\r\n\r\n\r\n        /**\r\n         * Count Length of Object\r\n         *\r\n         * This function calculates the number of properties (keys) in a given object.\r\n         * @param {Object} object - The object for which the length is to be calculated.\r\n         * @returns {number} Returns the number of properties (keys) in the object.\r\n         */\r\n        _countLengthOfObject(object) {\r\n            // Return the number of keys in the object using Object.keys() and calculating its length\r\n            return Object.keys(object).length;\r\n        }\r\n\r\n        /**\r\n         * Submit Form via AJAX\r\n         *\r\n         * This private function submits a form using AJAX (Asynchronous JavaScript and XML) to the specified URL.\r\n         *\r\n         * @param {Object} AJAXOptions - The AJAX request options object containing URL, RequestMethod, RequestHeader, and optionally RequestType (response type).\r\n         * @param {HTMLFormElement} form - The form element to be submitted. Default is an empty string.\r\n         * @returns {Promise} Returns a Promise that will resolve to the JSON response from the server or reject with an error.\r\n         */\r\n        async _submitFormAJAX(AJAXOptions, form = '') {\r\n            form =  ( form && form !== '' ) ? form : this._form;\r\n            // Extract AJAX request options from the provided AJAXOptions object\r\n            const url = ( AJAXOptions && AJAXOptions['url'] ) ? AJAXOptions['url'] : this._getPageUrl();\r\n            const requestMethod = AJAXOptions['RequestMethod'];\r\n            const requestHeader = AJAXOptions['RequestHeader'];\r\n            const responseType = (AJAXOptions['RequestType'] != undefined && AJAXOptions['RequestType'] != '') ? AJAXOptions['RequestType'] : 'json';\r\n\r\n            // Initialize the ajaxContents variable to store the AJAX request parameters\r\n            var ajaxContents;\r\n\r\n            // Based on the request method, configure the AJAX request parameters\r\n            if (requestMethod === 'POST' || requestMethod === 'PUT' || requestMethod === 'DELETE' || requestMethod === 'UPDATE') {\r\n\r\n                let requestData ;\r\n\r\n                if (typeof window !== 'undefined') {\r\n                    // Get the form data using the `_getFormDetails` function\r\n                    requestData = this._getFormDetails(form);\r\n                }\r\n                else if (AJAXOptions && AJAXOptions['RequestBody'])\r\n                {\r\n                    requestData = AJAXOptions['RequestBody'];\r\n                }\r\n                else\r\n                {\r\n                    requestData = '';\r\n                }\r\n\r\n                ajaxContents = {\r\n                    method: requestMethod,\r\n                    headers: requestHeader,\r\n                    body: JSON.stringify(requestData)\r\n                };\r\n\r\n            } else {\r\n                ajaxContents = {\r\n                    method: requestMethod,\r\n                    headers: requestHeader\r\n                };\r\n            }\r\n\r\n            console.log(\"AJAX Loading....\");\r\n\r\n            /**\r\n             * Makes an AJAX request to the server.\r\n             * The result is a Promise that will resolve to the JSON response from the server or reject with an error.\r\n             */\r\n            let returnResult = await fetch(url, ajaxContents);\r\n\r\n                if (returnResult.ok) {\r\n                    console.log(\"AJAX Finished....\");\r\n                    const data = await returnResult.json();\r\n\r\n                    return data;\r\n                    // const token = data.token; // JWT token\r\n                    // Store the token in localStorage or a secure cookie.\r\n                } else {\r\n                    return \"AJAX Failed....\";\r\n                }\r\n\r\n        }\r\n\r\n        /**\r\n         * Validates a form using custom error messages and optional inline error display.\r\n         *\r\n         * @param {HTMLElement} form - The form element to be validated.\r\n         * @param {Object} customErrorMessages - Custom error messages for validation failures.\r\n         * @param {boolean} [isErrorInline=true] - Whether to display errors inline.\r\n         * @returns {boolean} - Returns true if the form is valid, otherwise false.\r\n         */\r\n        validate(form, customErrorMessages, isErrorInline = true) {\r\n            // If 'form' parameter is not provided, use the internal form reference '_form'\r\n            form = form ? form : this._form;\r\n\r\n            // Call the internal '_validateForm' function to perform validation\r\n            if (this._validateForm(form, customErrorMessages, isErrorInline)) {\r\n                return true; // Form is valid\r\n            }\r\n\r\n            return false; // Form validation failed\r\n        }\r\n\r\n        /**\r\n         * Submit Form with Validation and Optional AJAX\r\n         *\r\n         * This public method is used to submit a form with validation and optional AJAX handling.\r\n         *\r\n         * @param {Object} formDetails - The object containing form details, including 'form' (the form element), and 'isErrorMessageInline' (optional - whether to display error messages inline or in a modal).\r\n         * @param {Object} AJAXOptions - The object containing AJAX request options, including 'url', 'RequestMethod', 'RequestHeader', and optionally 'RequestType' (response type).\r\n         * @returns {boolean|Promise} Returns a boolean value indicating the success of form validation and AJAX processing, or a Promise containing the JSON response from the server (if AJAX is used).\r\n         */\r\n        submit() {\r\n\r\n            if (typeof window === 'undefined') {\r\n                console.error(\"To access this function, you will need to execute it in a browser like, Google Chrome, Safari, FireFox, Microsoft Edge, etc.\");\r\n                return false;\r\n            }\r\n\r\n            // Extract form and error display options from the this._formOptions object\r\n            const form = this._form;\r\n            form.setAttribute('novalidate', '');\r\n            form.addEventListener('submit', (e)=>{\r\n                e.preventDefault();\r\n            });\r\n            const isErrorMessageInline = this._isErrorInline ;\r\n            form.classList.add('relative-position');\r\n\r\n            // Find the submit button based on its ID or type (button) within the form\r\n            const submitBtn = form.querySelector('button[type=submit]') || form.querySelector('button[type=submit]') || form.querySelector('input[type=submit]') || form.querySelector('#jsSubmit') || form.querySelector('button') || false;\r\n            \r\n            if (submitBtn) {\r\n                // Store the initial value or innerHTML of the submit button to be restored later\r\n                var submitBtnInitialValue = submitBtn.value || submitBtn.innerHTML;\r\n\r\n                // Attach a click event listener to the submit button\r\n                submitBtn.addEventListener('click', () => {\r\n                    \r\n                    // Initialize a variable to hold the response data\r\n                    var responseData = false;\r\n\r\n                    // Show a loading message on the submit button while processing the form\r\n                    (submitBtn.value) ? submitBtn.value = 'Loading...' : submitBtn.innerHTML = \"<svg fill='currentcolor' class='spin' style='margin-right: 3px;' viewBox='0 0 1000 1000' xmlns='http://www.w3.org/2000/svg'><path d='M462.25 0c-6.371 0 -11.531 5.159 -11.531 11.531l0 182.219l.031 0c0 6.347 5.153 11.5 11.5 11.5l69.063 0c.343 .03 .68 .031 1.031 .031 6.372 0 11.531 -5.16 11.531 -11.531l0 -182.219l-.031 0c0 -6.347 -5.153 -11.5 -11.5 -11.5l-69.094 0c-.328 -.03 -.663 -.031 -1 -.031zm249.594 46.594c-4.082 -.111 -8.091 1.968 -10.281 5.75l-91.094 157.781l0 .062c-3.161 5.5 -1.282 12.528 4.219 15.688l60.063 34.656c.203 .136 .41 .251 .625 .375 5.5 3.187 12.533 1.313 15.719 -4.188l91.125 -157.813c3.187 -5.5 1.282 -12.533 -4.219 -15.719l-60.688 -35.063c-1.719 -.996 -3.613 -1.481 -5.469 -1.531zm-428.375 2.688c-1.856 .051 -3.75 .567 -5.469 1.563l-60.688 35.063c-5.474 3.17 -7.372 10.199 -4.219 15.688l90.781 157.219c.106 .21 .224 .418 .344 .625 3.187 5.5 10.218 7.373 15.719 4.188l60.719 -35.063c5.474 -3.17 7.341 -10.199 4.188 -15.688l-90.75 -157.188c-.107 -.217 -.221 -.444 -.344 -.656 -2.19 -3.782 -6.199 -5.861 -10.281 -5.75zm620.375 162.313c-1.848 .046 -3.722 .515 -5.438 1.5l-157.219 90.781c-.21 .106 -.418 .224 -.625 .344 -5.5 3.187 -7.373 10.218 -4.188 15.719l35.063 60.719c3.17 5.474 10.199 7.341 15.688 4.188l157.188 -90.75c.217 -.107 .444 -.221 .656 -.344 5.5 -3.185 7.374 -10.25 4.188 -15.75l-35.063 -60.688c-2.179 -3.764 -6.184 -5.82 -10.25 -5.719zm-810.375 4.656c-4.082 -.111 -8.091 1.968 -10.281 5.75l-35.063 60.688c-3.187 5.5 -1.282 12.565 4.219 15.75l157.781 91.094l.062 0c5.5 3.161 12.528 1.282 15.688 -4.219l34.656 -60.063c.136 -.203 .251 -.41 .375 -.625 3.187 -5.5 1.313 -12.533 -4.188 -15.719l-157.813 -91.125c-1.719 -.996 -3.582 -1.481 -5.438 -1.531zm712.781 234.469l0 .031c-6.347 0 -11.5 5.153 -11.5 11.5l0 69.063c-.029 .343 -.063 .68 -.063 1.031 0 6.372 5.192 11.531 11.563 11.531l182.219 0l0 -.031c6.347 0 11.5 -5.153 11.5 -11.5l0 -69.094c.03 -.328 .031 -.663 .031 -1 0 -6.371 -5.159 -11.531 -11.531 -11.531l-182.219 0zm-794.719 5.406l0 .031c-6.347 0 -11.5 5.153 -11.5 11.5l0 69.094c-.03 .328 -.031 .663 -.031 1 0 6.371 5.159 11.531 11.531 11.531l182.219 0l0 -.031c6.347 0 11.5 -5.153 11.5 -11.5l0 -69.063c.03 -.343 .031 -.68 .031 -1.031 0 -6.372 -5.16 -11.531 -11.531 -11.531l-182.219 0zm772.844 152.813c-4.075 -.097 -8.078 1.968 -10.25 5.75l-34.656 60.063c-.136 .203 -.251 .41 -.375 .625 -3.187 5.5 -1.313 12.533 4.188 15.719l157.813 91.125c5.5 3.187 12.533 1.282 15.719 -4.219l35.063 -60.688c3.187 -5.5 1.282 -12.565 -4.219 -15.75l-157.781 -91.094l-.062 0c-1.719 -.988 -3.585 -1.487 -5.438 -1.531zm-566.063 4.688c-1.848 .046 -3.722 .546 -5.438 1.531l-157.188 90.75c-.217 .107 -.444 .221 -.656 .344 -5.5 3.185 -7.374 10.25 -4.188 15.75l35.063 60.688c3.17 5.474 10.199 7.372 15.688 4.219l157.219 -90.781c.21 -.106 .418 -.224 .625 -.344 5.5 -3.187 7.373 -10.218 4.188 -15.719l-35.063 -60.719c-2.179 -3.764 -6.184 -5.82 -10.25 -5.719zm467.188 121.188c-1.856 .051 -3.719 .567 -5.438 1.563l-60.719 35.063c-5.474 3.17 -7.341 10.199 -4.188 15.688l90.75 157.188c.107 .217 .221 .444 .344 .656 3.185 5.5 10.25 7.374 15.75 4.188l60.688 -35.063c5.474 -3.17 7.372 -10.199 4.219 -15.688l-90.781 -157.219c-.106 -.21 -.224 -.418 -.344 -.625 -2.191 -3.782 -6.199 -5.861 -10.281 -5.75zm-366.313 2.719c-4.082 -.111 -8.091 1.968 -10.281 5.75l-91.125 157.813c-3.187 5.5 -1.282 12.533 4.219 15.719l60.688 35.063c5.5 3.187 12.565 1.282 15.75 -4.219l91.094 -157.781l0 -.062c3.161 -5.5 1.282 -12.528 -4.219 -15.688l-60.063 -34.656c-.203 -.136 -.41 -.251 -.625 -.375 -1.719 -.996 -3.582 -1.512 -5.438 -1.563zm148.469 57.156c-6.372 0 -11.531 5.192 -11.531 11.563l0 182.219l.031 0c0 6.347 5.153 11.5 11.5 11.5l69.094 0c.328 .03 .663 .031 1 .031 6.371 0 11.531 -5.159 11.531 -11.531l0 -182.219l-.031 0c0 -6.347 -5.153 -11.5 -11.5 -11.5l-69.063 0c-.343 -.029 -.68 -.063 -1.031 -.063z'/></svg> loading \";\r\n\r\n                    // Perform form validation using the `_validateForm` function\r\n                    if (!this._validateForm(form, this._customErrorMessages, isErrorMessageInline)) {\r\n                        // If form validation fails, set responseData to false and restore the submit button text to its initial value\r\n                        responseData = false;\r\n                        if (submitBtn.value) {\r\n                            submitBtn.value = submitBtnInitialValue;\r\n                        } else {\r\n                            submitBtn.innerHTML = submitBtnInitialValue;\r\n                        }\r\n                        return responseData;\r\n                    } else {\r\n                        // If form validation is successful, check if the AJAX request should be synchronous or asynchronous\r\n                        if (this._countLengthOfObject(this._ajaxOptions) === 0) {\r\n                            // If no AJAX options provided, perform a regular form submission without AJAX\r\n                            responseData = true;\r\n                            form.submit();\r\n\r\n                        } else if (this._ajaxOptions['RequestMethod'] != undefined && this._ajaxOptions['RequestMethod'].length === 0 ) {\r\n                            // If AJAX options provided but the request method is missing, log an error\r\n                            console.error(\"To perform an AJAX Request, you need to give a Request Method.\");\r\n                            responseData = false;\r\n                            if (submitBtn.value) {\r\n                                submitBtn.value = submitBtnInitialValue;\r\n                            } else {\r\n                                submitBtn.innerHTML = submitBtnInitialValue;\r\n                            }\r\n                        } else {\r\n                            // If AJAX options provided and request method is specified, proceed with AJAX handling\r\n                            var requestMethod = this._ajaxOptions['RequestMethod'];\r\n\r\n                            if (requestMethod === 'POST' || requestMethod === 'GET' || requestMethod === 'PUT' || requestMethod === 'DELETE') {\r\n                                // If the request method is valid, initiate the AJAX request using the `_submitFormAJAX` function\r\n                                this._AJAXResult = null;\r\n                                this._AJAXResult = this._submitFormAJAX(this._ajaxOptions, form);\r\n                                responseData = true;\r\n                            } else {\r\n                                // If the request method is invalid, log an error\r\n                                console.error(\"To perform an AJAX Request, you need to give a valid Request Method. Example (POST, GET, PUT, DELETE)\");\r\n                                responseData = false;\r\n                            }\r\n\r\n                            // Restore the submit button text to its initial value after the AJAX request\r\n                            if (submitBtn.value) {\r\n                                submitBtn.value = submitBtnInitialValue;\r\n                            } else {\r\n                                submitBtn.innerHTML = submitBtnInitialValue;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                });\r\n            } else {\r\n                // If no submit button is found, log an error and return false\r\n                console.error(\"No Submit Button was found. Refer to NFORSHIFU234 FORM Validation documentation at http://documentation.nforshifu.com/\");\r\n                return false;\r\n            }\r\n\r\n        }\r\n\r\n        /**\r\n         * isEmail\r\n         *\r\n         * This function checks if the given email string is a valid email format.\r\n         *\r\n         * @param {string} emailString - The email string to be validated.\r\n         * @returns {boolean} Returns true if the email is valid, otherwise false.\r\n         */\r\n        isEmail(emailString) {\r\n            // Call the private _isEmail function to validate the email format\r\n            // Return true if it is a valid email, otherwise false\r\n            return this._isEmail(emailString) ? true : false;\r\n        }\r\n\r\n        /**\r\n         * isURL\r\n         *\r\n         * This function checks if the given URL string has a valid format.\r\n         *\r\n         * @param {string} url - The URL string to be validated.\r\n         * @returns {boolean} Returns true if the URL format is valid, otherwise false.\r\n         */\r\n        isURL(url) {\r\n            // Call the private _isURL function to validate the URL format\r\n            // Return true if it is a valid URL, otherwise false\r\n            return this._isURL(url);\r\n        }\r\n\r\n        /**\r\n         * isZipcode\r\n         *\r\n         * This function checks if the given zipcode is valid.\r\n         *\r\n         * @param {string} zipcode - The zipcode string to be validated.\r\n         * @returns {boolean} Returns true if the zipcode is valid, otherwise false.\r\n         */\r\n        isZipcode(zipcode) {\r\n            // Call the private _isZIP function to validate the zipcode format\r\n            // Return true if it is a valid zipcode, otherwise false\r\n            return this._isZIP(zipcode) ;\r\n        }\r\n\r\n        /**\r\n         * containsOnlyIntegers\r\n         *\r\n         * This function checks if the given string contains only integers (whole numbers).\r\n         *\r\n         * @param {string} string - The string to be checked for containing only integers.\r\n         * @returns {boolean} Returns true if the string contains only integers, otherwise false.\r\n         */\r\n        containsOnlyIntegers(string) {\r\n            // Call the private _containsOnlyIntegers function to check if the string contains only integers\r\n            // Return true if the string contains only integers, otherwise false\r\n            return this._containsOnlyIntegers(string) ? true : false;\r\n        }\r\n\r\n        /**\r\n         * countString\r\n         *\r\n         * This function counts the number of characters in the given string.\r\n         *\r\n         * @param {string} string - The string whose character count is to be calculated.\r\n         * @returns {number} Returns the number of characters in the string.\r\n         */\r\n        countString(string) {\r\n            // Call the private _countString function to calculate the number of characters in the string\r\n            return this._countString(string);\r\n        }\r\n\r\n        /**\r\n         * generateRandomPassword\r\n         *\r\n         * This function generates a random password.\r\n         *\r\n         * @returns {string|boolean} Returns the randomly generated password as a string, or false if the generated value is not a string.\r\n         */\r\n        generateRandomPassword() {\r\n            // Call the private _generatePassword function to generate the random password\r\n            const pass = this._generatePassword();\r\n\r\n            // Check if the generated password is a string\r\n            if (typeof pass !== 'string') {\r\n                // If the generated value is not a string, return false\r\n                return false;\r\n            }\r\n\r\n            // Return the randomly generated password as a string\r\n            return pass;\r\n        }\r\n\r\n        /**\r\n         * Checks the validity of a password string based on specific criteria.\r\n         *\r\n         * @param {string} passwordString - The password string to be checked for validity.\r\n         * @param {boolean} includeSymbolsCheck - An optional flag indicating whether to include symbols check in the password criteria.\r\n         * @param {string} symbolRegex - An optional custom regular expression to specify the allowed symbols for the password (ignored if includeSymbolsCheck is false).\r\n         * @returns {boolean} Returns true if the password meets the specified criteria; otherwise, returns false.\r\n         * @memberof NFSFU234FormValidation\r\n         */\r\n        checkPassword(passwordString, includeSymbolsCheck = false, symbolRegex = '') {\r\n            return  this._checkPassword(passwordString, includeSymbolsCheck, symbolRegex);\r\n        }\r\n\r\n\r\n        /**\r\n         * Toggles the visibility of password fields.\r\n         *\r\n         * @param {HTMLFormElement} uform - The form element containing the password fields to toggle.\r\n         * @param {Object} icons - An optional object containing custom icons for password visibility toggling.\r\n         * @param {string} icons.show - The custom icon to represent the visible password state (optional).\r\n         * @param {string} icons.hide - The custom icon to represent the hidden password state (optional).\r\n         * @memberof NFSFU234FormValidation\r\n         */\r\n        togglePasswordVisibility(icons = {}, uform = '' ) {\r\n\r\n            if (typeof window === 'undefined') {\r\n                console.error(\"To access this function, you will need to execute it in a browser like, Google Chrome, Safari, FireFox, Microsoft Edge, etc.\");\r\n                return false;\r\n            }\r\n            this._togglePasswordVisibility(icons, uform);\r\n            return true;\r\n        }\r\n\r\n\r\n        /**\r\n         * getAJAXResponse\r\n         * \r\n         * This function retrieves the AJAX response that was stored in the global variable `_AJAXResult`.\r\n         * It returns the AJAX response if available or false if no response is found.\r\n         * \r\n         * @returns {Promise|boolean} - Returns the AJAX response (a Promise) if available; otherwise, returns false.\r\n         */\r\n        getAJAXResponse() {\r\n            if (this._AJAXResult) {\r\n                // If `_AJAXResult` contains a value (Promise), return the AJAX response\r\n                return this._AJAXResult;\r\n            } else {\r\n                // If `_AJAXResult` is empty (null or undefined), return false\r\n                return false;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * AJAX Request\r\n         *\r\n         * This method is used to make an AJAX request using the provided `AJAXOptions`.\r\n         * @param {Object} AJAXOptions - The object containing AJAX request options, including 'url', 'RequestMethod', 'RequestHeader', and optionally 'RequestType' (response type).\r\n         * @returns {Promise} Returns a Promise that will resolve to the JSON response from the server or reject with an error.\r\n         */\r\n        async ajax(AJAXOptions) {\r\n            // Initialize the `_AJAXResult` variable to store the AJAX response\r\n            this._AJAXResult = null;\r\n\r\n            // Perform the AJAX request using the private `_submitFormAJAX` function and return the response in `_AJAXResult`\r\n            return this._AJAXResult = await this._submitFormAJAX(AJAXOptions);\r\n            \r\n        }\r\n\r\n        /**\r\n         * Hashes a password securely, automatically detecting the environment.\r\n         * @param {string} password - The password to be hashed.\r\n         * @returns {Promise<string>} A promise that resolves to the hashed password.\r\n         */\r\n        async hashPassword(password) {\r\n            return this._hashPassword(password);\r\n        }\r\n                \r\n\r\n        /**\r\n         * validateInput\r\n         * \r\n         * This function is used to validate an input field based on its type and whether it is required or not.\r\n         * @param {HTMLElement} inputField - The input field to validate.\r\n         * @param {Object} customErrorMessages - An optional object containing custom error messages for different validation scenarios.\r\n         * @returns {boolean} Returns true if the input field is valid; otherwise, returns false.\r\n         */\r\n        validateInput(inputFeild, customErrorMessages) {\r\n\r\n            if (typeof window === 'undefined') {\r\n                console.error(\"To access this function, you will need to execute it in a browser like, Google Chrome, Safari, FireFox, Microsoft Edge, etc.\");\r\n                return false;\r\n            }\r\n\r\n            // Check if the input field exists\r\n            if (!inputFeild) {\r\n                console.error(`The input field you are trying to validate does not exist...`);\r\n                return false;\r\n            }\r\n\r\n            // Get the input field type, value, and required status\r\n            const inputFeildType = inputFeild.getAttribute('type');\r\n            const inputValue = inputFeild.value;\r\n            const isRequired = (inputFeild.getAttribute('required') != null || inputFeild.classList.contains('js-required')) ? true : false;\r\n            var errorMessage = null;\r\n\r\n            // Perform validation based on the input field type and required status\r\n\r\n            if ( inputFeildType === 'text' && isRequired &&  inputValue.length === 0   )\r\n            {\r\n                errorMessage = ( customErrorMessages && customErrorMessages['text'] && customErrorMessages['text'] !== '' ) ? customErrorMessages['text'] : ( this._customErrorMessages && this._customErrorMessages['text'] && this._customErrorMessages['text'] !== '' ) ? this._customErrorMessages['text']  : \"Input Field Cannot be left empty\";\r\n            }\r\n            else if ( inputFeildType === 'checkbox' && isRequired &&  ! inputFeild.checked  )\r\n            {\r\n                errorMessage = ( customErrorMessages && customErrorMessages['checkbox'] && customErrorMessages['checkbox'] !== '' ) ? customErrorMessages['checkbox'] : ( this._customErrorMessages && this._customErrorMessages['checkbox'] && this._customErrorMessages['checkbox'] !== '' ) ? this._customErrorMessages['checkbox']  : \"You cannot leave this box unchecked\";\r\n            }\r\n            else if ( inputFeildType === 'color' && isRequired &&  inputValue.length === 0   )\r\n            {\r\n                errorMessage = ( customErrorMessages && customErrorMessages['color'] && customErrorMessages['color'] !== '' ) ? customErrorMessages['color'] : ( this._customErrorMessages && this._customErrorMessages['color'] && this._customErrorMessages['color'] !== '' ) ? this._customErrorMessages['color']  : \"You cannot leave this box unchecked\";\r\n            }\r\n            else if ( inputFeildType === 'datetime' && isRequired &&  inputValue.length === 0   )\r\n            {\r\n                errorMessage = ( customErrorMessages && customErrorMessages['datetime'] && customErrorMessages['datetime'] !== '' ) ? customErrorMessages['datetime'] : ( this._customErrorMessages && this._customErrorMessages['datetime'] && this._customErrorMessages['datetime'] !== '' ) ? this._customErrorMessages['datetime']  : \"you have to choose a date and time\";\r\n            }\r\n            else if ( inputFeildType === 'datetime-local' && isRequired &&  inputValue.length === 0   )\r\n            {\r\n                errorMessage = ( customErrorMessages && customErrorMessages['datetime-local'] && customErrorMessages['datetime-local'] !== '' ) ? customErrorMessages['datetime-local'] : ( this._customErrorMessages && this._customErrorMessages['datetime-local'] && this._customErrorMessages['datetime-local'] !== '' ) ? this._customErrorMessages['datetime-local']  : \"you have to choose a date and time locally\";\r\n            }\r\n            else if ( inputFeildType === 'email' && isRequired &&  inputValue.length === 0   )\r\n            {\r\n                errorMessage = ( customErrorMessages && customErrorMessages['email'] && customErrorMessages['email']['empty'] && customErrorMessages['email']['empty'] !== '' ) ? customErrorMessages['email']['empty'] : ( this._customErrorMessages && this._customErrorMessages['email'] && this._customErrorMessages['email']['empty'] && this._customErrorMessages['email']['empty'] !== '' ) ? this._customErrorMessages['email']['empty']  : \"email feild is required\";\r\n            }\r\n            else if ( inputFeildType === 'file' && isRequired &&  inputValue.length === 0   )\r\n            {\r\n                errorMessage = ( customErrorMessages && customErrorMessages['file'] && customErrorMessages['file'] !== '' ) ? customErrorMessages['file'] : ( this._customErrorMessages && this._customErrorMessages['file'] && this._customErrorMessages['file'] !== '' ) ? this._customErrorMessages['file']  : \"you have to select a file\";\r\n            }\r\n            else if ( inputFeildType === 'hidden' && isRequired &&  inputValue.length === 0   )\r\n            {\r\n                errorMessage = ( customErrorMessages && customErrorMessages['hidden'] && customErrorMessages['hidden'] !== '' ) ? customErrorMessages['hidden'] : ( this._customErrorMessages && this._customErrorMessages['hidden'] && this._customErrorMessages['hidden'] !== '' ) ? this._customErrorMessages['hidden']  : \"input value is needed\";\r\n            }\r\n            else if ( inputFeildType === 'image' && isRequired &&  inputValue.length === 0   )\r\n            {\r\n                errorMessage = ( customErrorMessages && customErrorMessages['image'] && customErrorMessages['image'] !== '' ) ? customErrorMessages['image'] : ( this._customErrorMessages && this._customErrorMessages['image'] && this._customErrorMessages['image'] !== '' ) ? this._customErrorMessages['image']  : \"you need to select an image\";\r\n            }\r\n            else if ( inputFeildType === 'month' && isRequired &&  inputValue.length === 0   )\r\n            {\r\n                errorMessage = ( customErrorMessages && customErrorMessages['month'] && customErrorMessages['month'] !== '' ) ? customErrorMessages['month'] : ( this._customErrorMessages && this._customErrorMessages['month'] && this._customErrorMessages['month'] !== '' ) ? this._customErrorMessages['month']  : \"you need to select an image\";\r\n            }\r\n            else if ( inputFeildType === 'number' && isRequired &&  inputValue.length === 0   )\r\n            {\r\n                errorMessage = ( customErrorMessages && customErrorMessages['number'] && customErrorMessages['number'] !== '' ) ? customErrorMessages['number'] : ( this._customErrorMessages && this._customErrorMessages['number'] && this._customErrorMessages['number'] !== '' ) ? this._customErrorMessages['number']  : \"you need to type a number \";\r\n            }\r\n            else if ( inputFeildType === 'password' && isRequired &&  inputValue.length === 0   )\r\n            {\r\n                errorMessage = ( customErrorMessages && customErrorMessages['password'] && customErrorMessages['password'] !== '' ) ? customErrorMessages['password'] : ( this._customErrorMessages && this._customErrorMessages['password'] && this._customErrorMessages['password'] !== '' ) ? this._customErrorMessages['password']  : \"password feild cannot be empty\";\r\n            }\r\n            else if ( inputFeildType === 'radio' && !this.validateRadio(inputFeild) )\r\n            {\r\n                errorMessage = customErrorMessages && customErrorMessages.radio ? customErrorMessages.radio : 'Cannot submit. A required radio is not checked.';\r\n            }\r\n            else if ( inputFeildType === 'range' && isRequired &&  inputValue.length === 0   )\r\n            {\r\n                errorMessage = ( customErrorMessages && customErrorMessages['range'] && customErrorMessages['range'] !== '' ) ? customErrorMessages['range'] : ( this._customErrorMessages && this._customErrorMessages['range'] && this._customErrorMessages['range'] !== '' ) ? this._customErrorMessages['range']  : \"range has to be chosen\";\r\n            }\r\n            else if ( inputFeildType === 'tel' && isRequired &&  inputValue.length === 0   )\r\n            {\r\n                errorMessage = ( customErrorMessages && customErrorMessages['tel'] && customErrorMessages['tel'] !== '' ) ? customErrorMessages['tel'] : ( this._customErrorMessages && this._customErrorMessages['tel'] && this._customErrorMessages['tel'] !== '' ) ? this._customErrorMessages['tel']  : \"enter phone\";\r\n            }\r\n            else if ( inputFeildType === 'time' && isRequired &&  inputValue.length === 0   )\r\n            {\r\n                errorMessage = ( customErrorMessages && customErrorMessages['time'] && customErrorMessages['time'] !== '' ) ? customErrorMessages['time'] : ( this._customErrorMessages && this._customErrorMessages['time'] && this._customErrorMessages['time'] !== '' ) ? this._customErrorMessages['time']  : \"choose time\";\r\n            }\r\n            else if ( inputFeildType === 'url' && isRequired &&  inputValue.length === 0   )\r\n            {\r\n                errorMessage = ( customErrorMessages && customErrorMessages['url'] && customErrorMessages['url']['empty'] && customErrorMessages['url']['empty'] !== '' ) ? customErrorMessages['url']['empty'] : ( this._customErrorMessages && this._customErrorMessages['url'] && this._customErrorMessages['url']['empty'] && this._customErrorMessages['url']['empty'] !== '' ) ? this._customErrorMessages['url']['empty']  : \"choose time\";\r\n            }\r\n            else if ( inputFeildType === 'week' && isRequired &&  inputValue.length === 0   )\r\n            {\r\n                errorMessage = ( customErrorMessages && customErrorMessages['week'] && customErrorMessages['week'] !== '' ) ? customErrorMessages['week'] : ( this._customErrorMessages && this._customErrorMessages['week'] && this._customErrorMessages['week'] !== '' ) ? this._customErrorMessages['week']  : \"you need to select a day of the week\";\r\n            }\r\n            else if ( inputFeildType === 'zipcode' && isRequired &&  inputValue.length === 0   )\r\n            {\r\n                errorMessage = ( customErrorMessages && customErrorMessages['zipcode'] &&  customErrorMessages['zipcode']['empty'] && customErrorMessages['zipcode']['empty'] !== '' ) ? customErrorMessages['zipcode']['empty'] : ( this._customErrorMessages && this._customErrorMessages['zipcode'] && this._customErrorMessages['zipcode']['empty'] && this._customErrorMessages['zipcode']['empty'] !== '' ) ? this._customErrorMessages['zipcode']['empty']  : \"zip code is required\";\r\n            }\r\n            else if ( inputFeildType === 'email' &&  inputValue != '' && ! this._isEmail(inputValue)  )\r\n            {\r\n                errorMessage = ( customErrorMessages && customErrorMessages['email']  && customErrorMessages['email']['format'] && customErrorMessages['email']['format'] !== '' ) ? customErrorMessages['email']['format'] : ( this._customErrorMessages && this._customErrorMessages['email'] && this._customErrorMessages['email']['format'] && this._customErrorMessages['email']['format'] !== '' ) ? this._customErrorMessages['email']['format']  : \"please enter a valid email address (username@domain.com)\";\r\n            }\r\n            else if ( inputFeildType === 'url' &&  inputValue != '' && ! this._isURL(inputValue) )\r\n            {\r\n                errorMessage = ( customErrorMessages && customErrorMessages['url'] && customErrorMessages['url']['format'] && customErrorMessages['url']['format'] !== '' ) ? customErrorMessages['url']['format'] : ( this._customErrorMessages && this._customErrorMessages['url'] && this._customErrorMessages['url']['format'] && this._customErrorMessages['url']['format'] !== '' ) ? this._customErrorMessages['url']['format']  : \"please enter a valid url (e.x https://www.domain.com/)\";\r\n            }\r\n            else if ( inputFeildType === 'zipcode' &&  inputValue != '' && ! this._isZIP(inputValue) )\r\n            {\r\n                errorMessage = ( customErrorMessages && customErrorMessages['zipcode'] && customErrorMessages['zipcode']['format'] && customErrorMessages['zipcode']['format'] !== '' ) ? customErrorMessages['zipcode']['format'] : ( this._customErrorMessages && this._customErrorMessages['zipcode'] && this._customErrorMessages['zipcode']['format'] && this._customErrorMessages['zipcode']['format'] !== '' ) ? this._customErrorMessages['zipcode']['format']  : \"the zipcode is not in a correct format\";\r\n            }\r\n            else if ( inputFeildType === undefined )\r\n            {\r\n                errorMessage = \"There is an input feild with an attribute named, 'type'. kindly visit the documentation to know the types to use.\";\r\n                console.error(errorMessage);\r\n            }\r\n\r\n\r\n            // If errorMessage is not null, there's a validation error\r\n            if (errorMessage !== null) {\r\n                // Display the error message inline or in a modal based on the isErrorInline flag\r\n                if (this._isErrorInline) {\r\n                    this._displayErrorInline(inputFeild, errorMessage, 3000);\r\n                } else {\r\n                    this._focusInputElement(inputFeild, 3000);\r\n                    this._displayErrorModal(errorMessage, this._form);\r\n                }\r\n\r\n                return false; // Input field is not valid\r\n            }\r\n\r\n            return true; // Input field is valid\r\n        }\r\n\r\n        /**\r\n         * validateAllInput\r\n         * \r\n         * This function is used to validate all input fields within a specified form.\r\n         * @param {HTMLElement} uform - The form element containing the input fields to validate.\r\n         * @param {Object} customErrorMessages - An optional object containing custom error messages for different validation scenarios.\r\n         * @returns {boolean} Returns true if all input fields are valid; otherwise, returns false.\r\n         */\r\n        validateAllInput(uform, customErrorMessages) {\r\n\r\n            if (typeof window === 'undefined') {\r\n                console.error(\"To access this function, you will need to execute it in a browser like, Google Chrome, Safari, FireFox, Microsoft Edge, etc.\");\r\n                return false;\r\n            }\r\n\r\n            // Check if the form exists\r\n            var form = (uform) ? uform : false;\r\n\r\n            if (!form) {\r\n                console.error(\"The form you are trying to validate does not exist...\");\r\n                return false;\r\n            }\r\n\r\n            var shouldContinue = [];\r\n            const allInputsInForm = form.querySelectorAll('input');\r\n\r\n            // If there are input fields in the form\r\n            if (allInputsInForm.length > 0) {\r\n                allInputsInForm.forEach((input) => {\r\n                    // Validate each input field using the validateInput function\r\n                    if (this.validateInput(input, customErrorMessages)) {\r\n                        shouldContinue.push(true);\r\n                    } else {\r\n                        shouldContinue.push(false);\r\n                    }\r\n                });\r\n            } else {\r\n                // If there are no input fields in the form, consider it as valid\r\n                shouldContinue.push(true);\r\n            }\r\n\r\n            // Check if all validation results are the same (either all true or all false)\r\n            if (shouldContinue.length > 0 && this._areAllElementsTrue(shouldContinue)) {\r\n                return true; // All input fields are valid\r\n            } else {\r\n                return false; // At least one input field is invalid\r\n            }\r\n        }\r\n\r\n        /**\r\n         * validateCheckbox\r\n         * \r\n         * This function is used to validate a checkbox input field.\r\n         * @param {HTMLElement} checkboxInputField - The checkbox input field to validate.\r\n         * @param {Object} customErrorMessage - An object containing a custom error message for the validation scenario.\r\n         * @returns {boolean} Returns true if the checkbox is valid (checked or not required); otherwise, returns false.\r\n         */\r\n        validateCheckbox(checkboxInputFeild, customErrorMessage) {\r\n\r\n            if (typeof window === 'undefined') {\r\n                console.error(\"To access this function, you will need to execute it in a browser like, Google Chrome, Safari, FireFox, Microsoft Edge, etc.\");\r\n                return false;\r\n            }\r\n\r\n            // Check if the input field is a checkbox\r\n            if (checkboxInputFeild.getAttribute('type') !== 'checkbox') {\r\n                return false; // Not a checkbox, return false\r\n            }\r\n\r\n            const isRequired = (checkboxInputFeild.getAttribute('required') != null || checkboxInputFeild.classList.contains('js-required')) ? true : false;\r\n            var shouldContinue = [];\r\n\r\n            // If the checkbox is required and not checked\r\n            if (isRequired && !checkboxInputFeild.checked) {\r\n                var errorMessage = (customErrorMessage && customErrorMessage['checkbox'] && customErrorMessage['checkbox'] !== '') ? customErrorMessage['checkbox'] : 'you need to check this box';\r\n\r\n                // Display the error message inline or in a modal based on the isErrorInline flag\r\n                if (this._isErrorInline) {\r\n                    this._displayErrorInline(checkboxInputFeild, errorMessage, 3000);\r\n                } else {\r\n                    this._focusInputElement(checkboxInputFeild, 3000);\r\n                    this._displayErrorModal(errorMessage, this._form);\r\n                }\r\n\r\n                shouldContinue.push(false); // Mark the validation as unsuccessful\r\n            } else {\r\n                shouldContinue.push(true); // Mark the validation as successful\r\n            }\r\n\r\n            // Check if all validation results are the same (either all true or all false)\r\n            if (shouldContinue.length > 0 && this._areAllElementsTrue(shouldContinue)) {\r\n                return true; // Checkbox is valid or not required\r\n            } else {\r\n                return false; // Checkbox is required and not checked\r\n            }\r\n        }\r\n\r\n        /**\r\n         * validateAllCheckbox\r\n         * \r\n         * This function is used to validate all the checkbox input fields within a given form.\r\n         * @param {HTMLFormElement} uform - The form to validate.\r\n         * @param {Object} customErrorMessage - An object containing custom error messages for the validation scenarios.\r\n         * @returns {boolean} Returns true if all checkboxes are valid (either checked or not required); otherwise, returns false.\r\n         */\r\n        validateAllCheckbox(uform, customErrorMessage) {\r\n\r\n            if (typeof window === 'undefined') {\r\n                console.error(\"To access this function, you will need to execute it in a browser like, Google Chrome, Safari, FireFox, Microsoft Edge, etc.\");\r\n                return false;\r\n            }\r\n\r\n            var form = (uform) ? uform : false;\r\n\r\n            if (!form) {\r\n                console.error(\"The form you are trying to validate does not exist...\");\r\n                return false;\r\n            }\r\n\r\n            var shouldContinue = [];\r\n            const allCheckboxesInForm = form.querySelectorAll('input[type=checkbox]');\r\n\r\n            if (allCheckboxesInForm.length > 0) {\r\n                allCheckboxesInForm.forEach((checkbox) => {\r\n                    if (this.validateInput(checkbox, customErrorMessage)) {\r\n                        shouldContinue.push(true); // Checkbox is valid or not required\r\n                    } else {\r\n                        shouldContinue.push(false); // Checkbox is required and not checked\r\n                    }\r\n                });\r\n            } else {\r\n                shouldContinue.push(true); // No checkboxes found, mark validation as successful\r\n            }\r\n\r\n            // Check if all validation results are the same (either all true or all false)\r\n            if (shouldContinue.length > 0 && this._areAllElementsTrue(shouldContinue)) {\r\n                return true; // All checkboxes are valid or not required\r\n            } else {\r\n                return false; // At least one required checkbox is not checked\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Validate a single radio input field.\r\n         * \r\n         * This function is used to validate a single radio input field.\r\n         *\r\n         * @param {HTMLInputElement|string} radioInputField - The radio input field to validate. It can be either an HTMLInputElement or a string representing the name attribute of the radio group.\r\n         * @returns {boolean} Returns true if the radio input is valid (either checked or not required); otherwise, returns false.\r\n         */\r\n        validateRadio(radioInputField) {\r\n\r\n            if (typeof window === 'undefined') {\r\n                console.error(\"To access this function, you will need to execute it in a browser like, Google Chrome, Safari, FireFox, Microsoft Edge, etc.\");\r\n                return false;\r\n            }\r\n\r\n            let radioName;\r\n        \r\n            // Check if the input field is of type \"radio\"\r\n            if (typeof radioInputField === 'object' && radioInputField instanceof HTMLInputElement) {\r\n            radioName = radioInputField.getAttribute('name');\r\n            } else if (typeof radioInputField === 'string') {\r\n            radioName = radioInputField;\r\n            } else {\r\n            // Invalid input field type, return false\r\n            return false;\r\n            }\r\n        \r\n            const radioGroup = document.querySelectorAll(`input[type=radio][name=${radioName}]`);\r\n            let isRequired = false;\r\n            let isAnyRadioChecked = false;\r\n        \r\n            radioGroup.forEach((radio) => {\r\n            // Check if the radio input is required or has a class \"js-required\"\r\n            if (radio.required || radio.classList.contains('js-required')) {\r\n                isRequired = true;\r\n                if (radio.checked) {\r\n                isAnyRadioChecked = true;\r\n                }\r\n            }\r\n            });\r\n        \r\n            if (isRequired && !isAnyRadioChecked) {\r\n            // The radio input is required, but it's not checked\r\n            return false;\r\n            } else {\r\n            return true;\r\n            }\r\n        }\r\n  \r\n        \r\n        /**\r\n         * validateAllRadio\r\n         * \r\n         * This function is used to validate all radio input fields within a given form.\r\n         * @param {HTMLFormElement} uform - The form to validate.\r\n         * @param {Object} customErrorMessage - An object containing custom error messages for the radio input validation scenarios.\r\n         * @returns {boolean} Returns true if all radio inputs in the form are valid (either checked or not required); otherwise, returns false.\r\n         */\r\n        validateAllRadio(form, customErrorMessage) {\r\n\r\n            if (typeof window === 'undefined') {\r\n                console.error(\"To access this function, you will need to execute it in a browser like, Google Chrome, Safari, FireFox, Microsoft Edge, etc.\");\r\n                return false;\r\n            }\r\n\r\n            const allRadiosInForm = form.querySelectorAll('input[type=radio]');\r\n            let isValid = true;\r\n        \r\n            allRadiosInForm.forEach((radio) => {\r\n                if (!this.validateRadio(radio, customErrorMessage)) {\r\n                    isValid = false;\r\n                }\r\n            });\r\n        \r\n            return isValid;\r\n        }\r\n\r\n        /**\r\n         * validateSelect\r\n         * \r\n         * This function is used to validate a select (dropdown) field.\r\n         * @param {HTMLSelectElement} selectField - The select field to validate.\r\n         * @param {Object} customErrorMessage - An object containing custom error messages for the select field validation scenarios.\r\n         * @returns {boolean} Returns true if the select field is valid (has a selected value or is not required); otherwise, returns false.\r\n         */\r\n        validateSelect(selectFeild, customErrorMessage) {\r\n\r\n            if (typeof window === 'undefined') {\r\n                console.error(\"To access this function, you will need to execute it in a browser like, Google Chrome, Safari, FireFox, Microsoft Edge, etc.\");\r\n                return false;\r\n            }\r\n\r\n            // Check if the select field exists\r\n            if (!selectFeild) {\r\n                console.error(`The select field was not found.`);\r\n                // Push false to the shouldContinue array to indicate validation failure\r\n                shouldContinue.push(false);\r\n                return false;\r\n            }\r\n\r\n            // Determine if the select field is required based on the 'required' attribute\r\n            const isRequired = (selectFeild.getAttribute('required') != null || selectFeild.classList.contains('js-required')) ? true : false;\r\n            // Check if the select field has a value selected\r\n            const selectValue = (selectFeild.value.length === 0 || selectFeild.value === \" \" || selectFeild.value === \"\"  ) ? false : true;\r\n\r\n            var shouldContinue = [];\r\n\r\n            if (isRequired && !selectValue) {\r\n                // The select field is required, but no value is selected\r\n\r\n                // Get the error message from customErrorMessage or use a default one\r\n                var errorMessage = (customErrorMessage && customErrorMessage['select'] && customErrorMessage['select'] !== '') ? customErrorMessage['select'] : \"You have to select an option\";\r\n\r\n                // Display the error message inline or in a modal based on the isErrorInline flag\r\n                if (this._isErrorInline) {\r\n                    this._displayErrorInline(selectFeild, errorMessage, 3000);\r\n                } else {\r\n                    this._focusInputElement(selectFeild, 3000);\r\n                    this._displayErrorModal(errorMessage, this._form);\r\n                }\r\n\r\n                // Push false to the shouldContinue array to indicate validation failure\r\n                shouldContinue.push(false);\r\n            } else {\r\n                // The select field is either not required or has a value selected\r\n\r\n                // Push true to the shouldContinue array to indicate validation success\r\n                shouldContinue.push(true);\r\n            }\r\n\r\n            // Check if all validation results are the same (either all true or all false)\r\n            if (this._areAllElementsTrue(shouldContinue)) {\r\n                return true; // Validation succeeded\r\n            } else {\r\n                return false; // Validation failed\r\n            }\r\n        }\r\n\r\n        /**\r\n         * validateAllSelect\r\n         * \r\n         * This function is used to validate all select (dropdown) fields within a given form.\r\n         * @param {HTMLFormElement} uform - The form to validate.\r\n         * @param {Object} customErrorMessage - An object containing custom error messages for the select field validation scenarios.\r\n         * @returns {boolean} Returns true if all select fields in the form are valid (have a selected value or are not required); otherwise, returns false.\r\n         */\r\n        validateAllSelect(uform, customErrorMessage) {\r\n\r\n            if (typeof window === 'undefined') {\r\n                console.error(\"To access this function, you will need to execute it in a browser like, Google Chrome, Safari, FireFox, Microsoft Edge, etc.\");\r\n                return false;\r\n            }\r\n\r\n            var form = (uform) ? uform : false;\r\n\r\n            // Check if the form exists\r\n            if (!form) {\r\n                console.error(\"The form you are trying to validate does not exist...\");\r\n                return false;\r\n            }\r\n\r\n            var shouldContinue = [];\r\n            const allSelectsInForm = form.querySelectorAll('select');\r\n\r\n            if (allSelectsInForm.length > 0) {\r\n\r\n                // Iterate through all select fields in the form\r\n                allSelectsInForm.forEach((select) => {\r\n\r\n                    // Call the validateSelect function for each select field\r\n                    if (this.validateSelect(select, customErrorMessage)) {\r\n                        shouldContinue.push(true); // Validation succeeded for this select field\r\n                    } else {\r\n                        shouldContinue.push(false); // Validation failed for this select field\r\n                    }\r\n\r\n                });\r\n\r\n            } else {\r\n                shouldContinue.push(true); // No select fields found in the form\r\n            }\r\n\r\n            // Check if all validation results are the same (either all true or all false)\r\n            if (this._areAllElementsTrue(shouldContinue)) {\r\n                return true; // All select fields are valid or not required\r\n            } else {\r\n                return false; // At least one select field validation failed\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Validates a textarea field.\r\n         * @param {HTMLTextAreaElement} textareaField - The textarea element to be validated.\r\n         * @param {Object} customErrorMessage - An optional object containing custom error messages for different fields.\r\n         * @returns {boolean} Returns true if the validation passes, otherwise returns false.\r\n         */\r\n        validateTextarea(textareaField, customErrorMessage) {\r\n\r\n            if (typeof window === 'undefined') {\r\n                console.error(\"To access this function, you will need to execute it in a browser like, Google Chrome, Safari, FireFox, Microsoft Edge, etc.\");\r\n                return false;\r\n            }\r\n\r\n            // Check if the textarea element is valid and exists in the DOM\r\n            if (!textareaField) {\r\n                console.error(\"The textarea you are trying to validate is not found\");\r\n                return false;\r\n            }\r\n\r\n\r\n            // Determine if the textarea is required based on the 'required' attribute\r\n            const isRequired = (textareaField.getAttribute('required') != null || textareaField.classList.contains('js-required')) ? true : false;\r\n\r\n            // Initialize an array to track whether each validation check passes (true) or fails (false)\r\n            var shouldContinue = [];\r\n\r\n            // Check if the textarea value is empty or not\r\n            const textareaValue = (textareaField.value.length === 0 ) ? false : true;\r\n\r\n            // Determine the error message to display for the textarea validation\r\n            var errorMessage = (customErrorMessage && customErrorMessage['textarea'] && customErrorMessage['textarea'] !== '') ?\r\n                customErrorMessage['textarea'] : (this._customErrorMessages && this._customErrorMessages['textarea'] &&\r\n                    this._customErrorMessages['textarea'] !== '') ? this._customErrorMessages['textarea'] :\r\n                \"Textarea Field Cannot be left empty\";\r\n\r\n\r\n            // Perform the required validation for the textarea\r\n            if (isRequired && !textareaValue) {\r\n                // If the textarea is required and has no value, show the error message\r\n                // Display the error message inline or in a modal based on the isErrorInline flag\r\n                if (!this._isErrorInline) {\r\n                    this._focusInputElement(textareaField, 3000);\r\n                    this._displayErrorModal(errorMessage, this._form);\r\n                } else {\r\n                    this._displayErrorInline(textareaField, errorMessage, 3000);\r\n                }\r\n\r\n                shouldContinue.push(false); // Add 'false' to the shouldContinue array to indicate validation failure\r\n            } else {\r\n                shouldContinue.push(true); // Add 'true' to the shouldContinue array to indicate validation success\r\n            }\r\n\r\n            // Check if all elements in the shouldContinue array are equal to true\r\n            // If all validations are successful, return true. Otherwise, return false.\r\n            if (this._areAllElementsTrue(shouldContinue)) {\r\n                return true; // All validation checks passed\r\n            } else {\r\n                return false; // Some validation checks failed\r\n            }\r\n\r\n        }\r\n\r\n        /**\r\n         * validateAllTextarea\r\n         * \r\n         * This function is used to validate all textarea fields within a given form.\r\n         * @param {HTMLFormElement} uform - The form to validate.\r\n         * @param {Object} customErrorMessage - An object containing custom error messages for the textarea field validation scenarios.\r\n         * @returns {boolean} Returns true if all textarea fields in the form are valid (have a value or are not required); otherwise, returns false.\r\n         */\r\n        validateAllTextarea(uform, customErrorMessage) {\r\n\r\n            if (typeof window === 'undefined') {\r\n                console.error(\"To access this function, you will need to execute it in a browser like, Google Chrome, Safari, FireFox, Microsoft Edge, etc.\");\r\n                return false;\r\n            }\r\n\r\n            var form = (uform) ? uform : false;\r\n\r\n            // Check if the form exists\r\n            if (!form) {\r\n                console.error(\"The form you are trying to validate does not exist...\");\r\n                return false;\r\n            }\r\n\r\n            var shouldContinue = [];\r\n            const allTextareasInForm = form.querySelectorAll('textarea');\r\n\r\n            if (allTextareasInForm.length > 0) {\r\n\r\n                // Iterate through all textarea fields in the form\r\n                allTextareasInForm.forEach((textarea) => {\r\n\r\n                    // Call the validateTextarea function for each textarea field\r\n                    if (this.validateTextarea(textarea, customErrorMessage)) {\r\n                        shouldContinue.push(true); // Validation succeeded for this textarea field\r\n                    } else {\r\n                        shouldContinue.push(false); // Validation failed for this textarea field\r\n                    }\r\n\r\n                });\r\n\r\n            } else {\r\n                shouldContinue.push(true); // No textarea fields found in the form\r\n            }\r\n\r\n            // Check if all validation results are the same (either all true or all false)\r\n            if (this._areAllElementsTrue(shouldContinue)) {\r\n                return true; // All textarea fields are valid or not required\r\n            } else {\r\n                return false; // At least one textarea field validation failed\r\n            }\r\n        }\r\n\r\n        /**\r\n         * restrictInputLengthWithCounter\r\n         * \r\n         * This function restricts the input length of a given input element and displays a character counter.\r\n         * @param {HTMLInputElement} inputElement - The input element to restrict the input length for.\r\n         * @param {HTMLElement} counterContainer - The container element to display the character counter.\r\n         * @param {Object} options - An object containing additional configuration options for the feature.\r\n         */\r\n        restrictInputLengthWithCounter(uInputElement, uCounterContainer, options) {\r\n\r\n            if (typeof window === 'undefined') {\r\n                console.error(\"To access this function, you will need to execute it in a browser like, Google Chrome, Safari, FireFox, Microsoft Edge, etc.\");\r\n                return false;\r\n            }\r\n\r\n            const inputElement = ( uInputElement && this._checkVariableType(uInputElement) === 'HTML element' ) ? uInputElement : ( uInputElement && this._checkVariableType(uInputElement) === 'string' ) ? document.getElementById(uInputElement) : false;\r\n\r\n            if ( !inputElement )\r\n            {\r\n                console.error(\"The textarea you are trying to count and restrict is not found.\");\r\n                return false;\r\n            }\r\n\r\n            const counterContainer = (uCounterContainer && this._checkVariableType(uCounterContainer) === 'HTML element') ? uCounterContainer : (uCounterContainer && this._checkVariableType(uCounterContainer) === 'string' && document.getElementById(uCounterContainer) ) ? document.getElementById(uCounterContainer) : false;\r\n            \r\n            // Call the internal function to handle the character counting and input restriction while typing\r\n            this._countInputCharactersAndRestrictInputWhileTyping(inputElement, counterContainer, options);\r\n\r\n        }\r\n\r\n        /**\r\n         * Gets the page URL.\r\n         *\r\n         * @returns {string} The page URL.\r\n         * @memberof NFSFU234FormValidation\r\n         */\r\n        getPageUrl() {\r\n            return this._getPageUrl();\r\n        }\r\n\r\n        /**\r\n         * Checks the type of a variable and returns a string representation of the type.\r\n         * If the type cannot be determined, returns 'unknown'.\r\n         *\r\n         * @param {*} variable - The variable whose type needs to be checked.\r\n         * @returns {string} A string representing the type of the variable, or 'unknown'.\r\n         */\r\n        checkType(variable) {\r\n            // Use the private _checkVariableType function to get the type of the variable\r\n            const type = this._checkVariableType(variable);\r\n\r\n            // Check if the type is not null and is a string\r\n            if (type !== null && typeof type === 'string') {\r\n                return type;\r\n            } else {\r\n                return 'unknown';\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    // For Node.js (CommonJS) environment, export 'NFSFU234FormValidation' as a module.\r\n    if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\r\n        module.exports = NFSFU234FormValidation;\r\n    }\r\n\r\n    // For browser (window) environment, attach 'NFSFU234FormValidation' to the global object.\r\n    if (typeof global !== 'undefined') {\r\n        global.NFSFU234FormValidation = NFSFU234FormValidation;\r\n    }\r\n\r\n    // This is the end of the IIFE, and the 'NFSFU234FormValidation' class is encapsulated within it.\r\n})(typeof window !== \"undefined\" ? window : global);\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(861);\n"],"names":["root","factory","exports","module","define","amd","this","_regeneratorRuntime","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","key","desc","value","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","invoke","resolve","reject","record","result","_typeof","__await","then","unwrapped","error","previousPromise","callInvokeWithMethodAndArg","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","undefined","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","asyncGeneratorStep","gen","_next","_throw","_asyncToGenerator","args","arguments","apply","_defineProperties","target","props","descriptor","input","hint","prim","toPrimitive","res","String","Number","_toPrimitive","global","NFSFU234FormValidation","window","formOptions","ajaxOptions","instance","Constructor","_classCallCheck","console","log","_form","_checkVariableType","document","getElementById","querySelector","_errorMessageContainer","_AJAXResult","_formOptions","_ajaxOptions","_isErrorInline","_customErrorMessages","protoProps","staticProps","_hashPassword3","_ajax","_submitFormAJAX2","_nodeHash2","_browserHash2","_hashPassword2","_callee","password","_context","_nodeHash","_browserHash","_x","_callee2","salt","hashedPassword","_context2","bcrypt","genSalt","hash","_x2","_callee3","_context3","setRandomFallback","len","randomBytes","Uint8Array","Math","floor","random","_x3","email","test","str","zipCode","url","variable","Array","HTMLElement","inputElement","counterContainer","_this","options","maxLength","parseInt","minLength","shouldButtonDisable","form","addEventListener","counterElement","textLength","_countString","returnMessage","createElement","classList","add","parentNode","appendChild","remove","querySelectorAll","button","disabled","innerHTML","concat","uppercaseLetters","lowercaseLetters","numbers","symbols","randomLength","charactersAdded","randomCharType","includeSymbolsCheck","userSymbolRegex","string","toString","location","href","icons","uform","iconContainer","inputType","getAttribute","setAttribute","showIcon","hideIcon","duration","focus","setTimeout","inputField","message","isSuccess","_focusInputElement","errorMessageContainer","removeChild","errorMessageParentContainer","errorContainerId","shouldLogToConsole","errorMessageMessageContainer","errorMessageIconContainer","shouldContinue","requestData","allInputsInForm","allTextareasInForm","allSelectsInForm","index","attributeName","inputValue","checked","NaN","textarea","textareaValue","select","selectValue","_areAllElementsTrue","customErrorMessages","validateAllInput","validateAllTextarea","validateAllSelect","arr","every","element","_callee4","AJAXOptions","requestMethod","requestHeader","ajaxContents","returnResult","data","_args4","_context4","_getPageUrl","_getFormDetails","headers","body","JSON","stringify","fetch","ok","json","_x4","isErrorInline","_validateForm","_this2","e","preventDefault","isErrorMessageInline","submitBtn","submitBtnInitialValue","responseData","_countLengthOfObject","submit","_submitFormAJAX","emailString","_isEmail","_isURL","zipcode","_isZIP","_containsOnlyIntegers","pass","_generatePassword","passwordString","symbolRegex","_checkPassword","_togglePasswordVisibility","_callee5","_context5","_x5","_callee6","_context6","_hashPassword","_x6","inputFeild","inputFeildType","isRequired","contains","errorMessage","validateRadio","radio","_displayErrorInline","_displayErrorModal","_this3","validateInput","checkboxInputFeild","customErrorMessage","_this4","allCheckboxesInForm","checkbox","radioInputField","radioName","HTMLInputElement","radioGroup","isAnyRadioChecked","required","_this5","allRadiosInForm","isValid","selectFeild","_this6","validateSelect","textareaField","_this7","validateTextarea","uInputElement","uCounterContainer","_countInputCharactersAndRestrictInputWhileTyping","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","g","globalThis","Function"],"sourceRoot":""}